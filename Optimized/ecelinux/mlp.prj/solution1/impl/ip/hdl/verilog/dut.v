// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.670000,HLS_SYN_LAT=189971,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=195,HLS_SYN_FF=29857,HLS_SYN_LUT=41691,HLS_VERSION=2019_2}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [26:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [26:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg[26:0] strm_out_V_V_din;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln23_fu_655_p2;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [3:0] i_fu_661_p2;
reg   [3:0] i_reg_813;
reg    ap_block_state2;
reg   [26:0] tmp_V_load_reg_818;
reg   [26:0] tmp_V_2_load_reg_823;
reg   [26:0] tmp_V_3_load_reg_828;
reg   [26:0] tmp_V_4_load_reg_833;
reg   [26:0] tmp_V_5_load_reg_838;
reg   [26:0] tmp_V_6_load_reg_843;
reg   [26:0] tmp_V_7_load_reg_848;
reg   [26:0] tmp_V_8_load_reg_853;
reg   [26:0] tmp_V_9_load_reg_858;
reg   [26:0] mean_output_V_reg_863;
wire    ap_CS_fsm_state4;
wire    grp_mlp_xcel_fu_388_ap_ready;
wire    grp_mlp_xcel_fu_388_ap_done;
reg   [26:0] variance_output_V_reg_868;
wire    grp_mlp_xcel_fu_388_ap_start;
wire    grp_mlp_xcel_fu_388_ap_idle;
wire   [26:0] grp_mlp_xcel_fu_388_ap_return_0;
wire   [26:0] grp_mlp_xcel_fu_388_ap_return_1;
wire   [3:0] ap_phi_mux_i_0_phi_fu_381_p4;
reg   [3:0] i_0_reg_377;
wire    ap_CS_fsm_state3;
reg    grp_mlp_xcel_fu_388_ap_start_reg;
reg    ap_block_state2_ignore_call9;
reg   [26:0] tmp_V_fu_328;
reg   [26:0] tmp_V_2_fu_332;
reg   [26:0] tmp_V_3_fu_336;
reg   [26:0] tmp_V_4_fu_340;
reg   [26:0] tmp_V_5_fu_344;
reg   [26:0] tmp_V_6_fu_348;
reg   [26:0] tmp_V_7_fu_352;
reg   [26:0] tmp_V_8_fu_356;
reg   [26:0] tmp_V_9_fu_360;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_mlp_xcel_fu_388_ap_start_reg = 1'b0;
end

mlp_xcel grp_mlp_xcel_fu_388(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mlp_xcel_fu_388_ap_start),
    .ap_done(grp_mlp_xcel_fu_388_ap_done),
    .ap_idle(grp_mlp_xcel_fu_388_ap_idle),
    .ap_ready(grp_mlp_xcel_fu_388_ap_ready),
    .input_0_V_read(tmp_V_load_reg_818),
    .input_1_V_read(tmp_V_2_load_reg_823),
    .input_2_V_read(tmp_V_3_load_reg_828),
    .input_3_V_read(tmp_V_4_load_reg_833),
    .input_4_V_read(tmp_V_5_load_reg_838),
    .input_5_V_read(tmp_V_6_load_reg_843),
    .input_6_V_read(tmp_V_7_load_reg_848),
    .input_7_V_read(tmp_V_8_load_reg_853),
    .input_8_V_read(tmp_V_9_load_reg_858),
    .ap_return_0(grp_mlp_xcel_fu_388_ap_return_0),
    .ap_return_1(grp_mlp_xcel_fu_388_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mlp_xcel_fu_388_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mlp_xcel_fu_388_ap_start_reg <= 1'b1;
        end else if ((grp_mlp_xcel_fu_388_ap_ready == 1'b1)) begin
            grp_mlp_xcel_fu_388_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_377 <= i_reg_813;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_377 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_813 <= i_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_mlp_xcel_fu_388_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        mean_output_V_reg_863 <= grp_mlp_xcel_fu_388_ap_return_0;
        variance_output_V_reg_868 <= grp_mlp_xcel_fu_388_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd1))) begin
        tmp_V_2_fu_332 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_2_load_reg_823 <= tmp_V_2_fu_332;
        tmp_V_3_load_reg_828 <= tmp_V_3_fu_336;
        tmp_V_4_load_reg_833 <= tmp_V_4_fu_340;
        tmp_V_5_load_reg_838 <= tmp_V_5_fu_344;
        tmp_V_6_load_reg_843 <= tmp_V_6_fu_348;
        tmp_V_7_load_reg_848 <= tmp_V_7_fu_352;
        tmp_V_8_load_reg_853 <= tmp_V_8_fu_356;
        tmp_V_9_load_reg_858 <= tmp_V_9_fu_360;
        tmp_V_load_reg_818 <= tmp_V_fu_328;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd2))) begin
        tmp_V_3_fu_336 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd3))) begin
        tmp_V_4_fu_340 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd4))) begin
        tmp_V_5_fu_344 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd5))) begin
        tmp_V_6_fu_348 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd6))) begin
        tmp_V_7_fu_352 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd7))) begin
        tmp_V_8_fu_356 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd7) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd6) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd5) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd4) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd3) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd2) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd1) & ~(ap_phi_mux_i_0_phi_fu_381_p4 == 4'd0) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_9_fu_360 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_0_phi_fu_381_p4 == 4'd0))) begin
        tmp_V_fu_328 <= strm_in_V_V_dout;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((strm_out_V_V_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            strm_out_V_V_din = variance_output_V_reg_868;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            strm_out_V_V_din = mean_output_V_reg_863;
        end else begin
            strm_out_V_V_din = 'bx;
        end
    end else begin
        strm_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln23_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_mlp_xcel_fu_388_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state2 = ((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call9 = ((icmp_ln23_fu_655_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

assign ap_phi_mux_i_0_phi_fu_381_p4 = i_0_reg_377;

assign grp_mlp_xcel_fu_388_ap_start = grp_mlp_xcel_fu_388_ap_start_reg;

assign i_fu_661_p2 = (i_0_reg_377 + 4'd1);

assign icmp_ln23_fu_655_p2 = ((i_0_reg_377 == 4'd9) ? 1'b1 : 1'b0);

endmodule //dut
