-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculate_variance is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outputs_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    outputs_V_2_ce0 : OUT STD_LOGIC;
    outputs_V_2_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    mean_V : IN STD_LOGIC_VECTOR (26 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
end;


architecture behav of calculate_variance is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv28_FFFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111111111111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv111_A3D70A3D70A3D8 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000010100011110101110000101000111101011100001010001111011000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv111_0 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv36_FFFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FF6 : STD_LOGIC_VECTOR (11 downto 0) := "111111110110";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_1B : STD_LOGIC_VECTOR (11 downto 0) := "000000011011";
    constant ap_const_lv27_7FFFFFF : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111111111111";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rhs_V_fu_188_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_reg_885 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_fu_198_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_893 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln69_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_17_fu_223_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_V_17_reg_908 : STD_LOGIC_VECTOR (35 downto 0);
    signal l_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_261_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_269_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_reg_926 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_fu_277_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_reg_931 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_553_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal mul_ln1148_reg_947 : STD_LOGIC_VECTOR (110 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_555_reg_952 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_554_reg_957 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln944_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln954_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_reg_983 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_550_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln935_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal man_V_2_fu_666_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1004 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln571_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1021 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_718_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln583_reg_1034 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_16_reg_157 : STD_LOGIC_VECTOR (35 downto 0);
    signal i_0_reg_169 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln71_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_V_fu_217_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_s_fu_231_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_9_fu_241_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_249_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_fu_265_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_fu_277_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1116_fu_274_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_277_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal sub_ln1148_fu_310_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal select_ln1148_fu_325_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln1192_fu_330_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sub_ln1192_fu_334_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln1192_1_fu_348_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal select_ln1148_2_fu_352_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal lhs_V_1_fu_340_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_2_fu_359_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal lsb_index_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_548_fu_386_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_402_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_406_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_412_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln947_fu_416_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_4_fu_422_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln947_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_549_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_491_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln954_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_1_fu_505_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln954_fu_495_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln954_fu_509_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln954_fu_514_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln954_2_fu_521_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln961_fu_525_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal m_fu_528_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal select_ln964_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_579_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_10_fu_586_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_630_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_644_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_4_fu_648_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_12_fu_656_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_11_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_660_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_618_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_640_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_680_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_692_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_698_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sext_ln581_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_735_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_739_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_552_fu_751_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581cast_fu_767_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal xor_ln571_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_771_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln586_fu_744_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal and_ln585_1_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_759_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal and_ln582_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_836_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln603_1_fu_850_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal or_ln603_1_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_863_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component dut_fpext_32ns_64cdu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_fsqrt_32ns_32ceu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mul_57ns_55s_cfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (54 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (110 downto 0) );
    end component;



begin
    dut_fpext_32ns_64cdu_U696 : component dut_fpext_32ns_64cdu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_assign_reg_998,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p1);

    dut_fsqrt_32ns_32ceu_U697 : component dut_fsqrt_32ns_32ceu
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => select_ln935_reg_993,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    dut_mul_57ns_55s_cfu_U698 : component dut_mul_57ns_55s_cfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 57,
        din1_WIDTH => 55,
        dout_WIDTH => 111)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        din1 => r_V_reg_931,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_169 <= i_reg_893;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_169 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    tmp_V_16_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                tmp_V_16_reg_157 <= ret_V_2_fu_359_p2(45 downto 10);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_16_reg_157 <= ap_const_lv36_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_893 <= i_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                icmp_ln571_reg_1009 <= icmp_ln571_fu_674_p2;
                icmp_ln581_reg_1015 <= icmp_ln581_fu_686_p2;
                icmp_ln582_reg_1028 <= icmp_ln582_fu_712_p2;
                man_V_2_reg_1004 <= man_V_2_fu_666_p3;
                sh_amt_reg_1021 <= sh_amt_fu_704_p3;
                trunc_ln583_reg_1034 <= trunc_ln583_fu_718_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln954_reg_978 <= icmp_ln954_fu_480_p2;
                    or_ln_reg_973(0) <= or_ln_fu_472_p3(0);
                sub_ln944_reg_967 <= sub_ln944_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                l_reg_916 <= l_fu_257_p1;
                p_Result_8_reg_903 <= tmp_V_16_reg_157(35 downto 35);
                tmp_V_17_reg_908 <= tmp_V_17_fu_223_p3;
                trunc_ln943_reg_921 <= trunc_ln943_fu_261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                m_3_reg_983 <= m_fu_528_p2(36 downto 1);
                tmp_550_reg_988 <= m_fu_528_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1148_reg_947 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                r_V_reg_931 <= r_V_fu_277_p2;
                tmp_553_reg_936 <= r_V_fu_277_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ret_V_reg_926 <= ret_V_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                rhs_V_reg_885 <= rhs_V_fu_188_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln935_reg_993 <= select_ln935_fu_606_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_553_reg_936 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_554_reg_957 <= sub_ln1148_fu_310_p2(110 downto 62);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_553_reg_936 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_555_reg_952 <= grp_fu_294_p2(110 downto 62);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                v_assign_reg_998 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    or_ln_reg_973(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln69_fu_192_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln69_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_640_p1));
    a_fu_433_p2 <= (icmp_ln947_fu_396_p2 and icmp_ln947_1_fu_427_p2);
    add_ln581_fu_692_p2 <= std_logic_vector(signed(ap_const_lv12_FF6) + signed(F2_fu_680_p2));
    add_ln954_fu_486_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_967));
    add_ln964_fu_573_p2 <= std_logic_vector(unsigned(select_ln964_fu_561_p3) + unsigned(sub_ln964_fu_568_p2));
    and_ln581_fu_796_p2 <= (xor_ln582_fu_790_p2 and icmp_ln581_reg_1015);
    and_ln582_fu_781_p2 <= (xor_ln571_fu_776_p2 and icmp_ln582_reg_1028);
    and_ln585_1_fu_813_p2 <= (icmp_ln585_fu_725_p2 and and_ln581_fu_796_p2);
    and_ln585_fu_807_p2 <= (xor_ln585_fu_801_p2 and and_ln581_fu_796_p2);
    and_ln603_fu_830_p2 <= (xor_ln581_fu_824_p2 and icmp_ln603_fu_730_p2);
    and_ln949_fu_460_p2 <= (xor_ln949_fu_447_p2 and p_Result_3_fu_453_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln603_2_fu_863_p3 when (or_ln603_2_fu_871_p2(0) = '1') else 
        ap_const_lv27_0;
    ashr_ln586_fu_739_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1004),to_integer(unsigned('0' & zext_ln586_fu_735_p1(31-1 downto 0)))));
    bitcast_ln696_fu_748_p1 <= v_assign_reg_998;
    bitcast_ln739_fu_602_p1 <= trunc_ln738_fu_598_p1;
    exp_tmp_V_fu_630_p4 <= ireg_V_fu_614_p1(62 downto 52);
    grp_fu_294_p0 <= ap_const_lv111_A3D70A3D70A3D8(57 - 1 downto 0);
    i_fu_198_p2 <= std_logic_vector(unsigned(i_0_reg_169) + unsigned(ap_const_lv7_1));
    icmp_ln571_fu_674_p2 <= "1" when (trunc_ln556_fu_618_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_686_p2 <= "1" when (signed(F2_fu_680_p2) > signed(ap_const_lv12_A)) else "0";
    icmp_ln582_fu_712_p2 <= "1" when (F2_fu_680_p2 = ap_const_lv12_A) else "0";
    icmp_ln585_fu_725_p2 <= "1" when (unsigned(sh_amt_reg_1021) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_730_p2 <= "1" when (unsigned(sh_amt_reg_1021) < unsigned(ap_const_lv12_1B)) else "0";
    icmp_ln69_fu_192_p2 <= "1" when (i_0_reg_169 = ap_const_lv7_64) else "0";
    icmp_ln935_fu_552_p2 <= "1" when (tmp_V_16_reg_157 = ap_const_lv36_0) else "0";
    icmp_ln947_1_fu_427_p2 <= "0" when (p_Result_4_fu_422_p2 = ap_const_lv36_0) else "1";
    icmp_ln947_fu_396_p2 <= "1" when (signed(tmp_548_fu_386_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln954_fu_480_p2 <= "1" when (signed(lsb_index_fu_380_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_fu_614_p1 <= grp_fu_180_p1;
    l_fu_257_p1 <= tmp_fu_249_p3(32 - 1 downto 0);
    lhs_V_1_fu_340_p3 <= (tmp_V_16_reg_157 & ap_const_lv10_0);
        lhs_V_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outputs_V_2_q0),28));

    lsb_index_fu_380_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_375_p2));
    lshr_ln947_fu_416_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv36_FFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_412_p1(31-1 downto 0)))));
    lshr_ln954_fu_495_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_17_reg_908),to_integer(unsigned('0' & zext_ln954_fu_491_p1(31-1 downto 0)))));
    m_fu_528_p2 <= std_logic_vector(unsigned(zext_ln954_2_fu_521_p1) + unsigned(zext_ln961_fu_525_p1));
    man_V_1_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_12_fu_656_p1));
    man_V_2_fu_666_p3 <= 
        man_V_1_fu_660_p2 when (p_Result_11_fu_622_p3(0) = '1') else 
        p_Result_12_fu_656_p1;
    or_ln581_fu_819_p2 <= (or_ln582_fu_786_p2 or icmp_ln581_reg_1015);
    or_ln582_fu_786_p2 <= (icmp_ln582_reg_1028 or icmp_ln571_reg_1009);
    or_ln603_1_fu_857_p2 <= (and_ln585_fu_807_p2 or and_ln582_fu_781_p2);
    or_ln603_2_fu_871_p2 <= (or_ln603_fu_844_p2 or or_ln603_1_fu_857_p2);
    or_ln603_fu_844_p2 <= (and_ln603_fu_830_p2 or and_ln585_1_fu_813_p2);
    or_ln949_fu_466_p2 <= (and_ln949_fu_460_p2 or a_fu_433_p2);
    or_ln_fu_472_p3 <= (ap_const_lv31_0 & or_ln949_fu_466_p2);
    outputs_V_2_address0 <= zext_ln71_fu_204_p1(7 - 1 downto 0);

    outputs_V_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            outputs_V_2_ce0 <= ap_const_logic_1;
        else 
            outputs_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_586_p5 <= (zext_ln962_fu_558_p1(63 downto 32) & tmp_3_fu_579_p3 & zext_ln962_fu_558_p1(22 downto 0));
    p_Result_11_fu_622_p3 <= ireg_V_fu_614_p1(63 downto 63);
    p_Result_12_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_648_p3),54));
    p_Result_3_fu_453_p3 <= tmp_V_17_reg_908(to_integer(unsigned(lsb_index_fu_380_p2)) downto to_integer(unsigned(lsb_index_fu_380_p2))) when (to_integer(unsigned(lsb_index_fu_380_p2))>= 0 and to_integer(unsigned(lsb_index_fu_380_p2))<=35) else "-";
    p_Result_4_fu_422_p2 <= (tmp_V_17_reg_908 and lshr_ln947_fu_416_p2);
    p_Result_8_fu_209_p3 <= tmp_V_16_reg_157(35 downto 35);
    p_Result_9_fu_241_p3 <= (ap_const_lv28_FFFFFFF & p_Result_s_fu_231_p4);
    
    p_Result_s_fu_231_p4_proc : process(tmp_V_17_fu_223_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(36+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(36+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable p_Result_s_fu_231_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(36 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_23(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_17_fu_223_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(36-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(36-1-unsigned(ap_const_lv32_23(6-1 downto 0)));
            for p_Result_s_fu_231_p4_i in 0 to 36-1 loop
                v0_cpy(p_Result_s_fu_231_p4_i) := tmp_V_17_fu_223_p3(36-1-p_Result_s_fu_231_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(36-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_231_p4 <= resvalue(36-1 downto 0);
    end process;

    r_V_fu_277_p0 <= sext_ln1116_fu_274_p1(28 - 1 downto 0);
    r_V_fu_277_p1 <= sext_ln1116_fu_274_p1(28 - 1 downto 0);
    r_V_fu_277_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_277_p0) * signed(r_V_fu_277_p1))), 55));
    ret_V_2_fu_359_p2 <= std_logic_vector(unsigned(select_ln1148_2_fu_352_p3) + unsigned(lhs_V_1_fu_340_p3));
    ret_V_fu_269_p2 <= std_logic_vector(signed(lhs_V_fu_265_p1) - signed(rhs_V_reg_885));
        rhs_V_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_V),28));

    select_ln1148_2_fu_352_p3 <= 
        sub_ln1192_fu_334_p2 when (tmp_553_reg_936(0) = '1') else 
        trunc_ln1192_1_fu_348_p1;
    select_ln1148_fu_325_p3 <= 
        tmp_554_reg_957 when (tmp_553_reg_936(0) = '1') else 
        tmp_555_reg_952;
    select_ln588_fu_759_p3 <= 
        ap_const_lv27_7FFFFFF when (tmp_552_fu_751_p3(0) = '1') else 
        ap_const_lv27_0;
    select_ln603_1_fu_850_p3 <= 
        select_ln588_fu_759_p3 when (and_ln585_fu_807_p2(0) = '1') else 
        trunc_ln583_reg_1034;
    select_ln603_2_fu_863_p3 <= 
        select_ln603_fu_836_p3 when (or_ln603_fu_844_p2(0) = '1') else 
        select_ln603_1_fu_850_p3;
    select_ln603_fu_836_p3 <= 
        shl_ln604_fu_771_p2 when (and_ln603_fu_830_p2(0) = '1') else 
        trunc_ln586_fu_744_p1;
    select_ln935_fu_606_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_552_p2(0) = '1') else 
        bitcast_ln739_fu_602_p1;
    select_ln954_fu_514_p3 <= 
        lshr_ln954_fu_495_p2 when (icmp_ln954_reg_978(0) = '1') else 
        shl_ln954_fu_509_p2;
    select_ln964_fu_561_p3 <= 
        ap_const_lv8_7F when (tmp_550_reg_988(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1116_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_926),55));

        sext_ln581_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1021),32));

    sext_ln581cast_fu_767_p1 <= sext_ln581_fu_722_p1(27 - 1 downto 0);
    sh_amt_fu_704_p3 <= 
        add_ln581_fu_692_p2 when (icmp_ln581_fu_686_p2(0) = '1') else 
        sub_ln581_fu_698_p2;
    shl_ln604_fu_771_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1034),to_integer(unsigned('0' & sext_ln581cast_fu_767_p1(27-1 downto 0)))));
    shl_ln954_fu_509_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_17_reg_908),to_integer(unsigned('0' & zext_ln954_1_fu_505_p1(31-1 downto 0)))));
    sub_ln1148_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv111_0) - unsigned(mul_ln1148_reg_947));
    sub_ln1192_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv46_0) - unsigned(trunc_ln1192_fu_330_p1));
    sub_ln581_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) - unsigned(F2_fu_680_p2));
    sub_ln944_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv32_24) - unsigned(l_reg_916));
    sub_ln947_fu_406_p2 <= std_logic_vector(signed(ap_const_lv6_3D) - signed(trunc_ln947_fu_402_p1));
    sub_ln954_fu_500_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_967));
    sub_ln964_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv8_1A) - unsigned(trunc_ln943_reg_921));
    tmp_3_fu_579_p3 <= (p_Result_8_reg_903 & add_ln964_fu_573_p2);
    tmp_4_fu_648_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_644_p1);
    tmp_548_fu_386_p4 <= lsb_index_fu_380_p2(31 downto 1);
    tmp_549_fu_439_p3 <= lsb_index_fu_380_p2(31 downto 31);
    tmp_552_fu_751_p3 <= bitcast_ln696_fu_748_p1(31 downto 31);
    tmp_V_17_fu_223_p3 <= 
        tmp_V_fu_217_p2 when (p_Result_8_fu_209_p3(0) = '1') else 
        tmp_V_16_reg_157;
    tmp_V_fu_217_p2 <= std_logic_vector(unsigned(ap_const_lv36_0) - unsigned(tmp_V_16_reg_157));
    
    tmp_fu_249_p3_proc : process(p_Result_9_fu_241_p3)
    begin
        tmp_fu_249_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_9_fu_241_p3(i) = '1' then
                tmp_fu_249_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1192_1_fu_348_p1 <= select_ln1148_fu_325_p3(46 - 1 downto 0);
    trunc_ln1192_fu_330_p1 <= select_ln1148_fu_325_p3(46 - 1 downto 0);
    trunc_ln556_fu_618_p1 <= ireg_V_fu_614_p1(63 - 1 downto 0);
    trunc_ln565_fu_644_p1 <= ireg_V_fu_614_p1(52 - 1 downto 0);
    trunc_ln583_fu_718_p1 <= man_V_2_fu_666_p3(27 - 1 downto 0);
    trunc_ln586_fu_744_p1 <= ashr_ln586_fu_739_p2(27 - 1 downto 0);
    trunc_ln738_fu_598_p1 <= p_Result_10_fu_586_p5(32 - 1 downto 0);
    trunc_ln943_fu_261_p1 <= tmp_fu_249_p3(8 - 1 downto 0);
    trunc_ln947_fu_402_p1 <= sub_ln944_fu_375_p2(6 - 1 downto 0);
    xor_ln571_fu_776_p2 <= (icmp_ln571_reg_1009 xor ap_const_lv1_1);
    xor_ln581_fu_824_p2 <= (or_ln581_fu_819_p2 xor ap_const_lv1_1);
    xor_ln582_fu_790_p2 <= (or_ln582_fu_786_p2 xor ap_const_lv1_1);
    xor_ln585_fu_801_p2 <= (icmp_ln585_fu_725_p2 xor ap_const_lv1_1);
    xor_ln949_fu_447_p2 <= (tmp_549_fu_439_p3 xor ap_const_lv1_1);
    zext_ln461_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_630_p4),12));
    zext_ln586_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_722_p1),54));
    zext_ln71_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_169),64));
    zext_ln947_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_406_p2),36));
    zext_ln954_1_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln954_fu_500_p2),36));
    zext_ln954_2_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_fu_514_p3),37));
    zext_ln954_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_fu_486_p2),36));
    zext_ln961_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_973),37));
    zext_ln962_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_3_reg_983),64));
end behav;
