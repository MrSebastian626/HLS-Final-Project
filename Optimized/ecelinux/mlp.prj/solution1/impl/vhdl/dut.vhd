-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.670000,HLS_SYN_LAT=189971,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=195,HLS_SYN_FF=29857,HLS_SYN_LUT=41691,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln23_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_fu_661_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_load_reg_818 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_2_load_reg_823 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_3_load_reg_828 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_4_load_reg_833 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_5_load_reg_838 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_6_load_reg_843 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_7_load_reg_848 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_8_load_reg_853 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_9_load_reg_858 : STD_LOGIC_VECTOR (26 downto 0);
    signal mean_output_V_reg_863 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_mlp_xcel_fu_388_ap_ready : STD_LOGIC;
    signal grp_mlp_xcel_fu_388_ap_done : STD_LOGIC;
    signal variance_output_V_reg_868 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_mlp_xcel_fu_388_ap_start : STD_LOGIC;
    signal grp_mlp_xcel_fu_388_ap_idle : STD_LOGIC;
    signal grp_mlp_xcel_fu_388_ap_return_0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_mlp_xcel_fu_388_ap_return_1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_phi_mux_i_0_phi_fu_381_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_377 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_mlp_xcel_fu_388_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call9 : BOOLEAN;
    signal tmp_V_fu_328 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_2_fu_332 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_3_fu_336 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_4_fu_340 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_5_fu_344 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_6_fu_348 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_7_fu_352 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_8_fu_356 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_9_fu_360 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component mlp_xcel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_1_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_2_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_3_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_4_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_5_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_6_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_7_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        input_8_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (26 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    grp_mlp_xcel_fu_388 : component mlp_xcel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mlp_xcel_fu_388_ap_start,
        ap_done => grp_mlp_xcel_fu_388_ap_done,
        ap_idle => grp_mlp_xcel_fu_388_ap_idle,
        ap_ready => grp_mlp_xcel_fu_388_ap_ready,
        input_0_V_read => tmp_V_load_reg_818,
        input_1_V_read => tmp_V_2_load_reg_823,
        input_2_V_read => tmp_V_3_load_reg_828,
        input_3_V_read => tmp_V_4_load_reg_833,
        input_4_V_read => tmp_V_5_load_reg_838,
        input_5_V_read => tmp_V_6_load_reg_843,
        input_6_V_read => tmp_V_7_load_reg_848,
        input_7_V_read => tmp_V_8_load_reg_853,
        input_8_V_read => tmp_V_9_load_reg_858,
        ap_return_0 => grp_mlp_xcel_fu_388_ap_return_0,
        ap_return_1 => grp_mlp_xcel_fu_388_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mlp_xcel_fu_388_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mlp_xcel_fu_388_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_mlp_xcel_fu_388_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mlp_xcel_fu_388_ap_ready = ap_const_logic_1)) then 
                    grp_mlp_xcel_fu_388_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_377 <= i_reg_813;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_377 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_813 <= i_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_mlp_xcel_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                mean_output_V_reg_863 <= grp_mlp_xcel_fu_388_ap_return_0;
                variance_output_V_reg_868 <= grp_mlp_xcel_fu_388_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_1))) then
                tmp_V_2_fu_332 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_2_load_reg_823 <= tmp_V_2_fu_332;
                tmp_V_3_load_reg_828 <= tmp_V_3_fu_336;
                tmp_V_4_load_reg_833 <= tmp_V_4_fu_340;
                tmp_V_5_load_reg_838 <= tmp_V_5_fu_344;
                tmp_V_6_load_reg_843 <= tmp_V_6_fu_348;
                tmp_V_7_load_reg_848 <= tmp_V_7_fu_352;
                tmp_V_8_load_reg_853 <= tmp_V_8_fu_356;
                tmp_V_9_load_reg_858 <= tmp_V_9_fu_360;
                tmp_V_load_reg_818 <= tmp_V_fu_328;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_2))) then
                tmp_V_3_fu_336 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_3))) then
                tmp_V_4_fu_340 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_4))) then
                tmp_V_5_fu_344 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_5))) then
                tmp_V_6_fu_348 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_6))) then
                tmp_V_7_fu_352 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_7))) then
                tmp_V_8_fu_356 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_7)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_6)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_5)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_4)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_3)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_2)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_1)) and not((ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_0)) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_9_fu_360 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_i_0_phi_fu_381_p4 = ap_const_lv4_0))) then
                tmp_V_fu_328 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_CS_fsm_state2, icmp_ln23_fu_655_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, grp_mlp_xcel_fu_388_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_mlp_xcel_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state2_assign_proc : process(strm_in_V_V_empty_n, icmp_ln23_fu_655_p2)
    begin
                ap_block_state2 <= ((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call9_assign_proc : process(strm_in_V_V_empty_n, icmp_ln23_fu_655_p2)
    begin
                ap_block_state2_ignore_call9 <= ((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state6)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_381_p4 <= i_0_reg_377;

    ap_ready_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state6)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_mlp_xcel_fu_388_ap_start <= grp_mlp_xcel_fu_388_ap_start_reg;
    i_fu_661_p2 <= std_logic_vector(unsigned(i_0_reg_377) + unsigned(ap_const_lv4_1));
    icmp_ln23_fu_655_p2 <= "1" when (i_0_reg_377 = ap_const_lv4_9) else "0";

    strm_in_V_V_blk_n_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln23_fu_655_p2)
    begin
        if (((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln23_fu_655_p2)
    begin
        if ((not(((icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln23_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_out_V_V_din_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5, ap_CS_fsm_state6, mean_output_V_reg_863, variance_output_V_reg_868)
    begin
        if ((strm_out_V_V_full_n = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                strm_out_V_V_din <= variance_output_V_reg_868;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                strm_out_V_V_din <= mean_output_V_reg_863;
            else 
                strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
