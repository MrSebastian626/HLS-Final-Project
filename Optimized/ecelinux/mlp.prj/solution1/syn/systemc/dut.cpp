// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> dut::ap_ST_fsm_state1 = "1";
const sc_lv<6> dut::ap_ST_fsm_state2 = "10";
const sc_lv<6> dut::ap_ST_fsm_state3 = "100";
const sc_lv<6> dut::ap_ST_fsm_state4 = "1000";
const sc_lv<6> dut::ap_ST_fsm_state5 = "10000";
const sc_lv<6> dut::ap_ST_fsm_state6 = "100000";
const sc_lv<32> dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dut::ap_const_lv32_1 = "1";
const sc_lv<1> dut::ap_const_lv1_0 = "0";
const sc_lv<32> dut::ap_const_lv32_4 = "100";
const sc_lv<32> dut::ap_const_lv32_5 = "101";
const sc_lv<1> dut::ap_const_lv1_1 = "1";
const sc_lv<32> dut::ap_const_lv32_3 = "11";
const sc_lv<4> dut::ap_const_lv4_0 = "0000";
const sc_lv<32> dut::ap_const_lv32_2 = "10";
const sc_lv<4> dut::ap_const_lv4_1 = "1";
const sc_lv<4> dut::ap_const_lv4_2 = "10";
const sc_lv<4> dut::ap_const_lv4_3 = "11";
const sc_lv<4> dut::ap_const_lv4_4 = "100";
const sc_lv<4> dut::ap_const_lv4_5 = "101";
const sc_lv<4> dut::ap_const_lv4_6 = "110";
const sc_lv<4> dut::ap_const_lv4_7 = "111";
const sc_lv<4> dut::ap_const_lv4_9 = "1001";
const bool dut::ap_const_boolean_1 = true;

dut::dut(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_mlp_xcel_fu_388 = new mlp_xcel("grp_mlp_xcel_fu_388");
    grp_mlp_xcel_fu_388->ap_clk(ap_clk);
    grp_mlp_xcel_fu_388->ap_rst(ap_rst);
    grp_mlp_xcel_fu_388->ap_start(grp_mlp_xcel_fu_388_ap_start);
    grp_mlp_xcel_fu_388->ap_done(grp_mlp_xcel_fu_388_ap_done);
    grp_mlp_xcel_fu_388->ap_idle(grp_mlp_xcel_fu_388_ap_idle);
    grp_mlp_xcel_fu_388->ap_ready(grp_mlp_xcel_fu_388_ap_ready);
    grp_mlp_xcel_fu_388->input_0_V_read(tmp_V_load_reg_818);
    grp_mlp_xcel_fu_388->input_1_V_read(tmp_V_2_load_reg_823);
    grp_mlp_xcel_fu_388->input_2_V_read(tmp_V_3_load_reg_828);
    grp_mlp_xcel_fu_388->input_3_V_read(tmp_V_4_load_reg_833);
    grp_mlp_xcel_fu_388->input_4_V_read(tmp_V_5_load_reg_838);
    grp_mlp_xcel_fu_388->input_5_V_read(tmp_V_6_load_reg_843);
    grp_mlp_xcel_fu_388->input_6_V_read(tmp_V_7_load_reg_848);
    grp_mlp_xcel_fu_388->input_7_V_read(tmp_V_8_load_reg_853);
    grp_mlp_xcel_fu_388->input_8_V_read(tmp_V_9_load_reg_858);
    grp_mlp_xcel_fu_388->ap_return_0(grp_mlp_xcel_fu_388_ap_return_0);
    grp_mlp_xcel_fu_388->ap_return_1(grp_mlp_xcel_fu_388_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( icmp_ln23_fu_655_p2 );

    SC_METHOD(thread_ap_block_state2_ignore_call9);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( icmp_ln23_fu_655_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_381_p4);
    sensitive << ( i_0_reg_377 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_mlp_xcel_fu_388_ap_start);
    sensitive << ( grp_mlp_xcel_fu_388_ap_start_reg );

    SC_METHOD(thread_i_fu_661_p2);
    sensitive << ( i_0_reg_377 );

    SC_METHOD(thread_icmp_ln23_fu_655_p2);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln23_fu_655_p2 );
    sensitive << ( i_0_reg_377 );

    SC_METHOD(thread_strm_in_V_V_blk_n);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln23_fu_655_p2 );

    SC_METHOD(thread_strm_in_V_V_read);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln23_fu_655_p2 );

    SC_METHOD(thread_strm_out_V_V_blk_n);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_strm_out_V_V_din);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( mean_output_V_reg_863 );
    sensitive << ( variance_output_V_reg_868 );

    SC_METHOD(thread_strm_out_V_V_write);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln23_fu_655_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_mlp_xcel_fu_388_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    grp_mlp_xcel_fu_388_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, strm_in_V_V_dout, "(port)strm_in_V_V_dout");
    sc_trace(mVcdFile, strm_in_V_V_empty_n, "(port)strm_in_V_V_empty_n");
    sc_trace(mVcdFile, strm_in_V_V_read, "(port)strm_in_V_V_read");
    sc_trace(mVcdFile, strm_out_V_V_din, "(port)strm_out_V_V_din");
    sc_trace(mVcdFile, strm_out_V_V_full_n, "(port)strm_out_V_V_full_n");
    sc_trace(mVcdFile, strm_out_V_V_write, "(port)strm_out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, strm_in_V_V_blk_n, "strm_in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln23_fu_655_p2, "icmp_ln23_fu_655_p2");
    sc_trace(mVcdFile, strm_out_V_V_blk_n, "strm_out_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_fu_661_p2, "i_fu_661_p2");
    sc_trace(mVcdFile, i_reg_813, "i_reg_813");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_V_load_reg_818, "tmp_V_load_reg_818");
    sc_trace(mVcdFile, tmp_V_2_load_reg_823, "tmp_V_2_load_reg_823");
    sc_trace(mVcdFile, tmp_V_3_load_reg_828, "tmp_V_3_load_reg_828");
    sc_trace(mVcdFile, tmp_V_4_load_reg_833, "tmp_V_4_load_reg_833");
    sc_trace(mVcdFile, tmp_V_5_load_reg_838, "tmp_V_5_load_reg_838");
    sc_trace(mVcdFile, tmp_V_6_load_reg_843, "tmp_V_6_load_reg_843");
    sc_trace(mVcdFile, tmp_V_7_load_reg_848, "tmp_V_7_load_reg_848");
    sc_trace(mVcdFile, tmp_V_8_load_reg_853, "tmp_V_8_load_reg_853");
    sc_trace(mVcdFile, tmp_V_9_load_reg_858, "tmp_V_9_load_reg_858");
    sc_trace(mVcdFile, mean_output_V_reg_863, "mean_output_V_reg_863");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_ready, "grp_mlp_xcel_fu_388_ap_ready");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_done, "grp_mlp_xcel_fu_388_ap_done");
    sc_trace(mVcdFile, variance_output_V_reg_868, "variance_output_V_reg_868");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_start, "grp_mlp_xcel_fu_388_ap_start");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_idle, "grp_mlp_xcel_fu_388_ap_idle");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_return_0, "grp_mlp_xcel_fu_388_ap_return_0");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_return_1, "grp_mlp_xcel_fu_388_ap_return_1");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_381_p4, "ap_phi_mux_i_0_phi_fu_381_p4");
    sc_trace(mVcdFile, i_0_reg_377, "i_0_reg_377");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_mlp_xcel_fu_388_ap_start_reg, "grp_mlp_xcel_fu_388_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state2_ignore_call9, "ap_block_state2_ignore_call9");
    sc_trace(mVcdFile, tmp_V_fu_328, "tmp_V_fu_328");
    sc_trace(mVcdFile, tmp_V_2_fu_332, "tmp_V_2_fu_332");
    sc_trace(mVcdFile, tmp_V_3_fu_336, "tmp_V_3_fu_336");
    sc_trace(mVcdFile, tmp_V_4_fu_340, "tmp_V_4_fu_340");
    sc_trace(mVcdFile, tmp_V_5_fu_344, "tmp_V_5_fu_344");
    sc_trace(mVcdFile, tmp_V_6_fu_348, "tmp_V_6_fu_348");
    sc_trace(mVcdFile, tmp_V_7_fu_352, "tmp_V_7_fu_352");
    sc_trace(mVcdFile, tmp_V_8_fu_356, "tmp_V_8_fu_356");
    sc_trace(mVcdFile, tmp_V_9_fu_360, "tmp_V_9_fu_360");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dut.hdltvin.dat");
    mHdltvoutHandle.open("dut.hdltvout.dat");
}

dut::~dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_mlp_xcel_fu_388;
}

void dut::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_mlp_xcel_fu_388_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && 
             esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_1))) {
            grp_mlp_xcel_fu_388_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mlp_xcel_fu_388_ap_ready.read())) {
            grp_mlp_xcel_fu_388_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_377 = i_reg_813.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_377 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())))) {
        i_reg_813 = i_fu_661_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_mlp_xcel_fu_388_ap_done.read(), ap_const_logic_1))) {
        mean_output_V_reg_863 = grp_mlp_xcel_fu_388_ap_return_0.read();
        variance_output_V_reg_868 = grp_mlp_xcel_fu_388_ap_return_1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_1))) {
        tmp_V_2_fu_332 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_1))) {
        tmp_V_2_load_reg_823 = tmp_V_2_fu_332.read();
        tmp_V_3_load_reg_828 = tmp_V_3_fu_336.read();
        tmp_V_4_load_reg_833 = tmp_V_4_fu_340.read();
        tmp_V_5_load_reg_838 = tmp_V_5_fu_344.read();
        tmp_V_6_load_reg_843 = tmp_V_6_fu_348.read();
        tmp_V_7_load_reg_848 = tmp_V_7_fu_352.read();
        tmp_V_8_load_reg_853 = tmp_V_8_fu_356.read();
        tmp_V_9_load_reg_858 = tmp_V_9_fu_360.read();
        tmp_V_load_reg_818 = tmp_V_fu_328.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_2))) {
        tmp_V_3_fu_336 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_3))) {
        tmp_V_4_fu_340 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_4))) {
        tmp_V_5_fu_344 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_5))) {
        tmp_V_6_fu_348 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_6))) {
        tmp_V_7_fu_352 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_7))) {
        tmp_V_8_fu_356 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && !esl_seteq<1,4,4>(ap_const_lv4_0, ap_phi_mux_i_0_phi_fu_381_p4.read()) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_1) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_2) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_3) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_4) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_5) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_6) && !esl_seteq<1,4,4>(ap_phi_mux_i_0_phi_fu_381_p4.read(), ap_const_lv4_7))) {
        tmp_V_9_fu_360 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,4,4>(ap_const_lv4_0, ap_phi_mux_i_0_phi_fu_381_p4.read()))) {
        tmp_V_fu_328 = strm_in_V_V_dout.read();
    }
}

void dut::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dut::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dut::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dut::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dut::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void dut::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void dut::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read()));
}

void dut::thread_ap_block_state2_ignore_call9() {
    ap_block_state2_ignore_call9 = (esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read()));
}

void dut::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut::thread_ap_phi_mux_i_0_phi_fu_381_p4() {
    ap_phi_mux_i_0_phi_fu_381_p4 = i_0_reg_377.read();
}

void dut::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut::thread_grp_mlp_xcel_fu_388_ap_start() {
    grp_mlp_xcel_fu_388_ap_start = grp_mlp_xcel_fu_388_ap_start_reg.read();
}

void dut::thread_i_fu_661_p2() {
    i_fu_661_p2 = (!i_0_reg_377.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_377.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dut::thread_icmp_ln23_fu_655_p2() {
    icmp_ln23_fu_655_p2 = (!i_0_reg_377.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_377.read() == ap_const_lv4_9);
}

void dut::thread_strm_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0))) {
        strm_in_V_V_blk_n = strm_in_V_V_empty_n.read();
    } else {
        strm_in_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())))) {
        strm_in_V_V_read = ap_const_logic_1;
    } else {
        strm_in_V_V_read = ap_const_logic_0;
    }
}

void dut::thread_strm_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        strm_out_V_V_blk_n = strm_out_V_V_full_n.read();
    } else {
        strm_out_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_out_V_V_din() {
    if (esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            strm_out_V_V_din = variance_output_V_reg_868.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            strm_out_V_V_din = mean_output_V_reg_863.read();
        } else {
            strm_out_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        strm_out_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dut::thread_strm_out_V_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1)))) {
        strm_out_V_V_write = ap_const_logic_1;
    } else {
        strm_out_V_V_write = ap_const_logic_0;
    }
}

void dut::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, strm_in_V_V_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln23_fu_655_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_mlp_xcel_fu_388_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_dout\" :  \"" << strm_in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_empty_n\" :  \"" << strm_in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_in_V_V_read\" :  \"" << strm_in_V_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_din\" :  \"" << strm_out_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_out_V_V_full_n\" :  \"" << strm_out_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_write\" :  \"" << strm_out_V_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

