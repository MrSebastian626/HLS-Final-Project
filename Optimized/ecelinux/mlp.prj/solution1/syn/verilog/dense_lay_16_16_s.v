// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_lay_16_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_read,
        input_1_V_read,
        input_2_V_read,
        input_3_V_read,
        input_4_V_read,
        input_5_V_read,
        input_6_V_read,
        input_7_V_read,
        input_8_V_read,
        input_9_V_read,
        input_10_V_read,
        input_11_V_read,
        input_12_V_read,
        input_13_V_read,
        input_14_V_read,
        input_15_V_read,
        output_0_V_read,
        output_1_V_read,
        output_2_V_read,
        output_3_V_read,
        output_4_V_read,
        output_5_V_read,
        output_6_V_read,
        output_7_V_read,
        output_8_V_read,
        output_9_V_read,
        output_10_V_read,
        output_11_V_read,
        output_12_V_read,
        output_13_V_read,
        output_14_V_read,
        output_15_V_read,
        mask_address0,
        mask_ce0,
        mask_q0,
        mask46_address0,
        mask46_ce0,
        mask46_q0,
        mask47_address0,
        mask47_ce0,
        mask47_q0,
        mask48_address0,
        mask48_ce0,
        mask48_q0,
        mask49_address0,
        mask49_ce0,
        mask49_q0,
        mask50_address0,
        mask50_ce0,
        mask50_q0,
        mask51_address0,
        mask51_ce0,
        mask51_q0,
        mask52_address0,
        mask52_ce0,
        mask52_q0,
        mask53_address0,
        mask53_ce0,
        mask53_q0,
        mask54_address0,
        mask54_ce0,
        mask54_q0,
        mask55_address0,
        mask55_ce0,
        mask55_q0,
        mask56_address0,
        mask56_ce0,
        mask56_q0,
        mask57_address0,
        mask57_ce0,
        mask57_q0,
        mask58_address0,
        mask58_ce0,
        mask58_q0,
        mask59_address0,
        mask59_ce0,
        mask59_q0,
        mask60_address0,
        mask60_ce0,
        mask60_q0,
        mask_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [25:0] input_0_V_read;
input  [25:0] input_1_V_read;
input  [25:0] input_2_V_read;
input  [25:0] input_3_V_read;
input  [25:0] input_4_V_read;
input  [25:0] input_5_V_read;
input  [25:0] input_6_V_read;
input  [25:0] input_7_V_read;
input  [25:0] input_8_V_read;
input  [25:0] input_9_V_read;
input  [25:0] input_10_V_read;
input  [25:0] input_11_V_read;
input  [25:0] input_12_V_read;
input  [25:0] input_13_V_read;
input  [25:0] input_14_V_read;
input  [25:0] input_15_V_read;
input  [25:0] output_0_V_read;
input  [25:0] output_1_V_read;
input  [25:0] output_2_V_read;
input  [25:0] output_3_V_read;
input  [25:0] output_4_V_read;
input  [25:0] output_5_V_read;
input  [25:0] output_6_V_read;
input  [25:0] output_7_V_read;
input  [25:0] output_8_V_read;
input  [25:0] output_9_V_read;
input  [25:0] output_10_V_read;
input  [25:0] output_11_V_read;
input  [25:0] output_12_V_read;
input  [25:0] output_13_V_read;
input  [25:0] output_14_V_read;
input  [25:0] output_15_V_read;
output  [6:0] mask_address0;
output   mask_ce0;
input  [0:0] mask_q0;
output  [6:0] mask46_address0;
output   mask46_ce0;
input  [0:0] mask46_q0;
output  [6:0] mask47_address0;
output   mask47_ce0;
input  [0:0] mask47_q0;
output  [6:0] mask48_address0;
output   mask48_ce0;
input  [0:0] mask48_q0;
output  [6:0] mask49_address0;
output   mask49_ce0;
input  [0:0] mask49_q0;
output  [6:0] mask50_address0;
output   mask50_ce0;
input  [0:0] mask50_q0;
output  [6:0] mask51_address0;
output   mask51_ce0;
input  [0:0] mask51_q0;
output  [6:0] mask52_address0;
output   mask52_ce0;
input  [0:0] mask52_q0;
output  [6:0] mask53_address0;
output   mask53_ce0;
input  [0:0] mask53_q0;
output  [6:0] mask54_address0;
output   mask54_ce0;
input  [0:0] mask54_q0;
output  [6:0] mask55_address0;
output   mask55_ce0;
input  [0:0] mask55_q0;
output  [6:0] mask56_address0;
output   mask56_ce0;
input  [0:0] mask56_q0;
output  [6:0] mask57_address0;
output   mask57_ce0;
input  [0:0] mask57_q0;
output  [6:0] mask58_address0;
output   mask58_ce0;
input  [0:0] mask58_q0;
output  [6:0] mask59_address0;
output   mask59_ce0;
input  [0:0] mask59_q0;
output  [6:0] mask60_address0;
output   mask60_ce0;
input  [0:0] mask60_q0;
input  [6:0] mask_offset;
output  [26:0] ap_return_0;
output  [26:0] ap_return_1;
output  [26:0] ap_return_2;
output  [26:0] ap_return_3;
output  [26:0] ap_return_4;
output  [26:0] ap_return_5;
output  [26:0] ap_return_6;
output  [26:0] ap_return_7;
output  [26:0] ap_return_8;
output  [26:0] ap_return_9;
output  [26:0] ap_return_10;
output  [26:0] ap_return_11;
output  [26:0] ap_return_12;
output  [26:0] ap_return_13;
output  [26:0] ap_return_14;
output  [26:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mask_ce0;
reg mask46_ce0;
reg mask47_ce0;
reg mask48_ce0;
reg mask49_ce0;
reg mask50_ce0;
reg mask51_ce0;
reg mask52_ce0;
reg mask53_ce0;
reg mask54_ce0;
reg mask55_ce0;
reg mask56_ce0;
reg mask57_ce0;
reg mask58_ce0;
reg mask59_ce0;
reg mask60_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] b4_V_address0;
reg    b4_V_ce0;
wire   [14:0] b4_V_q0;
wire   [3:0] w4_V_0_address0;
reg    w4_V_0_ce0;
wire   [12:0] w4_V_0_q0;
wire   [3:0] w4_V_1_address0;
reg    w4_V_1_ce0;
wire   [11:0] w4_V_1_q0;
wire   [3:0] w4_V_2_address0;
reg    w4_V_2_ce0;
wire   [9:0] w4_V_2_q0;
wire   [3:0] w4_V_3_address0;
reg    w4_V_3_ce0;
wire   [9:0] w4_V_3_q0;
wire   [3:0] w4_V_4_address0;
reg    w4_V_4_ce0;
wire   [10:0] w4_V_4_q0;
wire   [3:0] w4_V_5_address0;
reg    w4_V_5_ce0;
wire   [9:0] w4_V_5_q0;
wire   [3:0] w4_V_6_address0;
reg    w4_V_6_ce0;
wire   [10:0] w4_V_6_q0;
wire   [3:0] w4_V_7_address0;
reg    w4_V_7_ce0;
wire   [11:0] w4_V_7_q0;
wire   [3:0] w4_V_8_address0;
reg    w4_V_8_ce0;
wire   [11:0] w4_V_8_q0;
wire   [3:0] w4_V_9_address0;
reg    w4_V_9_ce0;
wire   [9:0] w4_V_9_q0;
wire   [3:0] w4_V_10_address0;
reg    w4_V_10_ce0;
wire   [10:0] w4_V_10_q0;
wire   [3:0] w4_V_11_address0;
reg    w4_V_11_ce0;
wire   [9:0] w4_V_11_q0;
wire   [3:0] w4_V_12_address0;
reg    w4_V_12_ce0;
wire   [11:0] w4_V_12_q0;
wire   [3:0] w4_V_13_address0;
reg    w4_V_13_ce0;
wire   [11:0] w4_V_13_q0;
wire   [3:0] w4_V_14_address0;
reg    w4_V_14_ce0;
wire   [13:0] w4_V_14_q0;
wire   [3:0] w4_V_15_address0;
reg    w4_V_15_ce0;
wire   [10:0] w4_V_15_q0;
wire   [26:0] output_15_V_read_ca_fu_956_p1;
reg   [26:0] output_15_V_read_ca_reg_2451;
wire   [26:0] output_14_V_read_ca_fu_960_p1;
reg   [26:0] output_14_V_read_ca_reg_2456;
wire   [26:0] output_13_V_read_ca_fu_964_p1;
reg   [26:0] output_13_V_read_ca_reg_2461;
wire   [26:0] output_12_V_read_ca_fu_968_p1;
reg   [26:0] output_12_V_read_ca_reg_2466;
wire   [26:0] output_11_V_read_ca_fu_972_p1;
reg   [26:0] output_11_V_read_ca_reg_2471;
wire   [26:0] output_10_V_read_ca_fu_976_p1;
reg   [26:0] output_10_V_read_ca_reg_2476;
wire   [26:0] output_9_V_read_cas_fu_980_p1;
reg   [26:0] output_9_V_read_cas_reg_2481;
wire   [26:0] output_8_V_read_cas_fu_984_p1;
reg   [26:0] output_8_V_read_cas_reg_2486;
wire   [26:0] output_7_V_read_cas_fu_988_p1;
reg   [26:0] output_7_V_read_cas_reg_2491;
wire   [26:0] output_6_V_read_cas_fu_992_p1;
reg   [26:0] output_6_V_read_cas_reg_2496;
wire   [26:0] output_5_V_read_cas_fu_996_p1;
reg   [26:0] output_5_V_read_cas_reg_2501;
wire   [26:0] output_4_V_read_cas_fu_1000_p1;
reg   [26:0] output_4_V_read_cas_reg_2506;
wire   [26:0] output_3_V_read_cas_fu_1004_p1;
reg   [26:0] output_3_V_read_cas_reg_2511;
wire   [26:0] output_2_V_read_cas_fu_1008_p1;
reg   [26:0] output_2_V_read_cas_reg_2516;
wire   [26:0] output_1_V_read_cas_fu_1012_p1;
reg   [26:0] output_1_V_read_cas_reg_2521;
wire   [26:0] output_0_V_read_cas_fu_1016_p1;
reg   [26:0] output_0_V_read_cas_reg_2526;
wire   [36:0] zext_ln1192_fu_1040_p1;
reg   [36:0] zext_ln1192_reg_2531;
wire   [36:0] zext_ln1192_39_fu_1044_p1;
reg   [36:0] zext_ln1192_39_reg_2536;
wire   [35:0] zext_ln1192_40_fu_1048_p1;
reg   [35:0] zext_ln1192_40_reg_2541;
wire   [35:0] zext_ln1192_41_fu_1052_p1;
reg   [35:0] zext_ln1192_41_reg_2546;
wire   [36:0] zext_ln1192_42_fu_1056_p1;
reg   [36:0] zext_ln1192_42_reg_2551;
wire   [35:0] zext_ln1192_43_fu_1060_p1;
reg   [35:0] zext_ln1192_43_reg_2556;
wire   [36:0] zext_ln1192_44_fu_1064_p1;
reg   [36:0] zext_ln1192_44_reg_2561;
wire   [36:0] zext_ln1192_45_fu_1068_p1;
reg   [36:0] zext_ln1192_45_reg_2566;
wire   [36:0] zext_ln1192_46_fu_1072_p1;
reg   [36:0] zext_ln1192_46_reg_2571;
wire   [35:0] zext_ln1192_47_fu_1076_p1;
reg   [35:0] zext_ln1192_47_reg_2576;
wire   [36:0] zext_ln1192_48_fu_1080_p1;
reg   [36:0] zext_ln1192_48_reg_2581;
wire   [35:0] zext_ln1192_49_fu_1084_p1;
reg   [35:0] zext_ln1192_49_reg_2586;
wire   [36:0] zext_ln1192_50_fu_1088_p1;
reg   [36:0] zext_ln1192_50_reg_2591;
wire   [36:0] zext_ln1192_51_fu_1092_p1;
reg   [36:0] zext_ln1192_51_reg_2596;
wire   [36:0] zext_ln1192_52_fu_1096_p1;
reg   [36:0] zext_ln1192_52_reg_2601;
wire   [36:0] zext_ln1192_53_fu_1100_p1;
reg   [36:0] zext_ln1192_53_reg_2606;
reg   [6:0] mask_addr_reg_2611;
reg   [6:0] mask46_addr_reg_2616;
reg   [6:0] mask47_addr_reg_2621;
reg   [6:0] mask48_addr_reg_2626;
reg   [6:0] mask49_addr_reg_2631;
reg   [6:0] mask50_addr_reg_2636;
reg   [6:0] mask51_addr_reg_2641;
reg   [6:0] mask52_addr_reg_2646;
reg   [6:0] mask53_addr_reg_2651;
reg   [6:0] mask54_addr_reg_2656;
reg   [6:0] mask55_addr_reg_2661;
reg   [6:0] mask56_addr_reg_2666;
reg   [6:0] mask57_addr_reg_2671;
reg   [6:0] mask58_addr_reg_2676;
reg   [6:0] mask59_addr_reg_2681;
reg   [6:0] mask60_addr_reg_2686;
wire   [4:0] i_fu_1190_p2;
reg   [4:0] i_reg_2694;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln19_fu_1184_p2;
wire   [3:0] trunc_ln26_fu_1217_p1;
reg   [3:0] trunc_ln26_reg_2784;
reg   [14:0] sum_V_reg_2789;
wire    ap_CS_fsm_state3;
reg   [12:0] w4_V_0_load_reg_2794;
reg   [11:0] w4_V_1_load_reg_2799;
reg   [9:0] w4_V_2_load_reg_2804;
reg   [9:0] w4_V_3_load_reg_2809;
reg   [10:0] w4_V_4_load_reg_2814;
reg   [9:0] w4_V_5_load_reg_2819;
reg   [10:0] w4_V_6_load_reg_2824;
reg   [11:0] w4_V_7_load_reg_2829;
reg   [11:0] w4_V_8_load_reg_2834;
reg   [9:0] w4_V_9_load_reg_2839;
reg   [10:0] w4_V_10_load_reg_2844;
reg   [9:0] w4_V_11_load_reg_2849;
reg   [11:0] w4_V_12_load_reg_2854;
reg   [11:0] w4_V_13_load_reg_2859;
reg   [13:0] w4_V_14_load_reg_2864;
reg   [10:0] w4_V_15_load_reg_2869;
wire   [0:0] tmp_fu_1525_p18;
reg   [0:0] tmp_reg_2874;
wire   [36:0] mul_ln1192_fu_1565_p2;
reg   [36:0] mul_ln1192_reg_2879;
wire    ap_CS_fsm_state4;
wire   [36:0] mul_ln1192_76_fu_1573_p2;
reg   [36:0] mul_ln1192_76_reg_2884;
wire   [35:0] mul_ln1192_77_fu_1581_p2;
reg   [35:0] mul_ln1192_77_reg_2889;
wire   [35:0] mul_ln1192_78_fu_1589_p2;
reg   [35:0] mul_ln1192_78_reg_2894;
wire   [36:0] mul_ln1192_79_fu_1597_p2;
reg   [36:0] mul_ln1192_79_reg_2899;
wire   [35:0] mul_ln1192_80_fu_1605_p2;
reg   [35:0] mul_ln1192_80_reg_2904;
wire   [36:0] mul_ln1192_81_fu_1613_p2;
reg   [36:0] mul_ln1192_81_reg_2909;
wire   [36:0] mul_ln1192_82_fu_1621_p2;
reg   [36:0] mul_ln1192_82_reg_2914;
wire   [36:0] mul_ln1192_83_fu_1629_p2;
reg   [36:0] mul_ln1192_83_reg_2919;
wire   [35:0] mul_ln1192_84_fu_1637_p2;
reg   [35:0] mul_ln1192_84_reg_2924;
wire   [36:0] mul_ln1192_85_fu_1645_p2;
reg   [36:0] mul_ln1192_85_reg_2929;
wire   [35:0] mul_ln1192_86_fu_1653_p2;
reg   [35:0] mul_ln1192_86_reg_2934;
wire   [36:0] mul_ln1192_87_fu_1661_p2;
reg   [36:0] mul_ln1192_87_reg_2939;
wire   [36:0] mul_ln1192_88_fu_1669_p2;
reg   [36:0] mul_ln1192_88_reg_2944;
wire   [36:0] mul_ln1192_89_fu_1677_p2;
reg   [36:0] mul_ln1192_89_reg_2949;
wire   [36:0] mul_ln1192_90_fu_1685_p2;
reg   [36:0] mul_ln1192_90_reg_2954;
reg   [26:0] tmp_82_reg_2959;
wire    ap_CS_fsm_state5;
reg   [26:0] tmp_85_reg_2964;
wire    ap_CS_fsm_state6;
reg   [26:0] tmp_88_reg_2969;
wire    ap_CS_fsm_state7;
reg   [26:0] tmp_91_reg_2974;
wire    ap_CS_fsm_state8;
reg   [26:0] tmp_94_reg_2979;
wire    ap_CS_fsm_state9;
reg   [4:0] i_0_reg_945;
wire    ap_CS_fsm_state10;
wire   [63:0] mask_offset_cast_fu_1020_p1;
wire   [63:0] zext_ln21_fu_1196_p1;
reg   [26:0] p_Val2_119_fu_206;
wire   [26:0] p_Val2_s_fu_2076_p3;
reg   [0:0] write_flag_0_fu_210;
reg   [0:0] write_flag62_0_fu_214;
reg   [26:0] p_Val2_120_fu_218;
reg   [26:0] p_Val2_121_fu_222;
reg   [0:0] write_flag59_0_fu_226;
reg   [26:0] p_Val2_122_fu_230;
reg   [0:0] write_flag19_0_fu_234;
reg   [0:0] write_flag56_0_fu_238;
reg   [26:0] p_Val2_123_fu_242;
reg   [26:0] p_Val2_124_fu_246;
reg   [0:0] write_flag53_0_fu_250;
reg   [26:0] p_Val2_125_fu_254;
reg   [0:0] write_flag23_0_fu_258;
reg   [0:0] write_flag50_0_fu_262;
reg   [26:0] p_Val2_126_fu_266;
reg   [26:0] p_Val2_127_fu_270;
reg   [0:0] write_flag47_0_fu_274;
reg   [26:0] p_Val2_128_fu_278;
reg   [0:0] write_flag26_0_fu_282;
reg   [0:0] write_flag44_0_fu_286;
reg   [26:0] p_Val2_129_fu_290;
reg   [26:0] p_Val2_130_fu_294;
reg   [0:0] write_flag41_0_fu_298;
reg   [26:0] p_Val2_131_fu_302;
reg   [0:0] write_flag29_0_fu_306;
reg   [0:0] write_flag38_0_fu_310;
reg   [26:0] p_Val2_132_fu_314;
reg   [26:0] p_Val2_133_fu_318;
reg   [0:0] write_flag35_0_fu_322;
reg   [26:0] p_Val2_134_fu_326;
reg   [0:0] write_flag32_0_fu_330;
wire   [26:0] select_ln28_fu_1317_p3;
wire   [26:0] select_ln28_110_fu_1324_p3;
wire   [26:0] select_ln28_111_fu_1331_p3;
wire   [26:0] select_ln28_112_fu_1338_p3;
wire   [26:0] select_ln28_113_fu_1345_p3;
wire   [26:0] select_ln28_114_fu_1352_p3;
wire   [26:0] select_ln28_115_fu_1359_p3;
wire   [26:0] select_ln28_116_fu_1366_p3;
wire   [26:0] select_ln28_117_fu_1373_p3;
wire   [26:0] select_ln28_118_fu_1380_p3;
wire   [26:0] select_ln28_119_fu_1387_p3;
wire   [26:0] select_ln28_120_fu_1394_p3;
wire   [26:0] select_ln28_121_fu_1401_p3;
wire   [26:0] select_ln28_122_fu_1408_p3;
wire   [26:0] select_ln28_123_fu_1415_p3;
wire   [26:0] select_ln28_124_fu_1422_p3;
wire   [25:0] mul_ln1192_fu_1565_p0;
wire  signed [12:0] mul_ln1192_fu_1565_p1;
wire   [25:0] mul_ln1192_76_fu_1573_p0;
wire  signed [11:0] mul_ln1192_76_fu_1573_p1;
wire   [25:0] mul_ln1192_77_fu_1581_p0;
wire  signed [9:0] mul_ln1192_77_fu_1581_p1;
wire   [25:0] mul_ln1192_78_fu_1589_p0;
wire  signed [9:0] mul_ln1192_78_fu_1589_p1;
wire   [25:0] mul_ln1192_79_fu_1597_p0;
wire  signed [10:0] mul_ln1192_79_fu_1597_p1;
wire   [25:0] mul_ln1192_80_fu_1605_p0;
wire  signed [9:0] mul_ln1192_80_fu_1605_p1;
wire   [25:0] mul_ln1192_81_fu_1613_p0;
wire  signed [10:0] mul_ln1192_81_fu_1613_p1;
wire   [25:0] mul_ln1192_82_fu_1621_p0;
wire  signed [11:0] mul_ln1192_82_fu_1621_p1;
wire   [25:0] mul_ln1192_83_fu_1629_p0;
wire  signed [11:0] mul_ln1192_83_fu_1629_p1;
wire   [25:0] mul_ln1192_84_fu_1637_p0;
wire  signed [9:0] mul_ln1192_84_fu_1637_p1;
wire   [25:0] mul_ln1192_85_fu_1645_p0;
wire  signed [10:0] mul_ln1192_85_fu_1645_p1;
wire   [25:0] mul_ln1192_86_fu_1653_p0;
wire  signed [9:0] mul_ln1192_86_fu_1653_p1;
wire   [25:0] mul_ln1192_87_fu_1661_p0;
wire  signed [11:0] mul_ln1192_87_fu_1661_p1;
wire   [25:0] mul_ln1192_88_fu_1669_p0;
wire  signed [11:0] mul_ln1192_88_fu_1669_p1;
wire   [25:0] mul_ln1192_89_fu_1677_p0;
wire  signed [13:0] mul_ln1192_89_fu_1677_p1;
wire   [25:0] mul_ln1192_90_fu_1685_p0;
wire  signed [10:0] mul_ln1192_90_fu_1685_p1;
wire   [24:0] shl_ln_fu_1690_p3;
wire  signed [36:0] sext_ln728_fu_1697_p1;
wire   [36:0] add_ln1192_fu_1701_p2;
wire   [26:0] tmp_s_fu_1706_p4;
wire   [36:0] shl_ln728_s_fu_1716_p3;
wire   [36:0] add_ln1192_86_fu_1724_p2;
wire   [26:0] tmp_81_fu_1732_p4;
wire   [36:0] shl_ln728_81_fu_1742_p3;
wire  signed [36:0] sext_ln1192_128_fu_1729_p1;
wire   [36:0] add_ln1192_87_fu_1750_p2;
wire   [36:0] shl_ln728_82_fu_1769_p3;
wire  signed [36:0] sext_ln1192_130_fu_1766_p1;
wire   [36:0] add_ln1192_88_fu_1776_p2;
wire   [26:0] tmp_83_fu_1782_p4;
wire   [36:0] shl_ln728_83_fu_1792_p3;
wire   [36:0] add_ln1192_89_fu_1800_p2;
wire   [26:0] tmp_84_fu_1808_p4;
wire   [36:0] shl_ln728_84_fu_1818_p3;
wire  signed [36:0] sext_ln1192_132_fu_1805_p1;
wire   [36:0] add_ln1192_90_fu_1826_p2;
wire   [36:0] shl_ln728_85_fu_1842_p3;
wire   [36:0] add_ln1192_91_fu_1849_p2;
wire   [26:0] tmp_86_fu_1854_p4;
wire   [36:0] shl_ln728_86_fu_1864_p3;
wire   [36:0] add_ln1192_92_fu_1872_p2;
wire   [26:0] tmp_87_fu_1877_p4;
wire   [36:0] shl_ln728_87_fu_1887_p3;
wire   [36:0] add_ln1192_93_fu_1895_p2;
wire   [36:0] shl_ln728_88_fu_1913_p3;
wire  signed [36:0] sext_ln1192_134_fu_1910_p1;
wire   [36:0] add_ln1192_94_fu_1920_p2;
wire   [26:0] tmp_89_fu_1926_p4;
wire   [36:0] shl_ln728_89_fu_1936_p3;
wire   [36:0] add_ln1192_95_fu_1944_p2;
wire   [26:0] tmp_90_fu_1952_p4;
wire   [36:0] shl_ln728_90_fu_1962_p3;
wire  signed [36:0] sext_ln1192_136_fu_1949_p1;
wire   [36:0] add_ln1192_96_fu_1970_p2;
wire   [36:0] shl_ln728_91_fu_1986_p3;
wire   [36:0] add_ln1192_97_fu_1993_p2;
wire   [26:0] tmp_92_fu_1998_p4;
wire   [36:0] shl_ln728_92_fu_2008_p3;
wire   [36:0] add_ln1192_98_fu_2016_p2;
wire   [26:0] tmp_93_fu_2021_p4;
wire   [36:0] shl_ln728_93_fu_2031_p3;
wire   [36:0] add_ln1192_99_fu_2039_p2;
wire   [36:0] shl_ln728_94_fu_2054_p3;
wire   [36:0] add_ln1192_100_fu_2061_p2;
wire   [26:0] trunc_ln708_s_fu_2066_p4;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

dense_lay_16_16_sbWr #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b4_V_address0),
    .ce0(b4_V_ce0),
    .q0(b4_V_q0)
);

dense_lay_16_16_sbXr #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_0_address0),
    .ce0(w4_V_0_ce0),
    .q0(w4_V_0_q0)
);

dense_lay_16_16_sbYs #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_1_address0),
    .ce0(w4_V_1_ce0),
    .q0(w4_V_1_q0)
);

dense_lay_16_16_sbZs #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_2_address0),
    .ce0(w4_V_2_ce0),
    .q0(w4_V_2_q0)
);

dense_lay_16_16_sb0s #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_3_address0),
    .ce0(w4_V_3_ce0),
    .q0(w4_V_3_q0)
);

dense_lay_16_16_sb1s #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_4_address0),
    .ce0(w4_V_4_ce0),
    .q0(w4_V_4_q0)
);

dense_lay_16_16_sb2s #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_5_address0),
    .ce0(w4_V_5_ce0),
    .q0(w4_V_5_q0)
);

dense_lay_16_16_sb3s #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_6_address0),
    .ce0(w4_V_6_ce0),
    .q0(w4_V_6_q0)
);

dense_lay_16_16_sb4t #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_7_address0),
    .ce0(w4_V_7_ce0),
    .q0(w4_V_7_q0)
);

dense_lay_16_16_sb5t #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_8_address0),
    .ce0(w4_V_8_ce0),
    .q0(w4_V_8_q0)
);

dense_lay_16_16_sb6t #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_9_address0),
    .ce0(w4_V_9_ce0),
    .q0(w4_V_9_q0)
);

dense_lay_16_16_sb7t #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_10_address0),
    .ce0(w4_V_10_ce0),
    .q0(w4_V_10_q0)
);

dense_lay_16_16_sb8t #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_11_address0),
    .ce0(w4_V_11_ce0),
    .q0(w4_V_11_q0)
);

dense_lay_16_16_sb9t #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_12_address0),
    .ce0(w4_V_12_ce0),
    .q0(w4_V_12_q0)
);

dense_lay_16_16_scau #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_13_address0),
    .ce0(w4_V_13_ce0),
    .q0(w4_V_13_q0)
);

dense_lay_16_16_scbu #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_14_address0),
    .ce0(w4_V_14_ce0),
    .q0(w4_V_14_q0)
);

dense_lay_16_16_sccu #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w4_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_15_address0),
    .ce0(w4_V_15_ce0),
    .q0(w4_V_15_q0)
);

dut_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
dut_mux_164_1_1_1_U629(
    .din0(mask_q0),
    .din1(mask46_q0),
    .din2(mask47_q0),
    .din3(mask48_q0),
    .din4(mask49_q0),
    .din5(mask50_q0),
    .din6(mask51_q0),
    .din7(mask52_q0),
    .din8(mask53_q0),
    .din9(mask54_q0),
    .din10(mask55_q0),
    .din11(mask56_q0),
    .din12(mask57_q0),
    .din13(mask58_q0),
    .din14(mask59_q0),
    .din15(mask60_q0),
    .din16(trunc_ln26_reg_2784),
    .dout(tmp_fu_1525_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_945 <= i_reg_2694;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_945 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag19_0_fu_234 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag19_0_fu_234 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag23_0_fu_258 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag23_0_fu_258 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag26_0_fu_282 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag26_0_fu_282 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd4) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag29_0_fu_306 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag29_0_fu_306 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd5) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag32_0_fu_330 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag32_0_fu_330 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd6) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag35_0_fu_322 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag35_0_fu_322 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd7) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag38_0_fu_310 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag38_0_fu_310 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd8) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag41_0_fu_298 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag41_0_fu_298 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd9) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag44_0_fu_286 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag44_0_fu_286 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd10) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag47_0_fu_274 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag47_0_fu_274 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd11) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag50_0_fu_262 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag50_0_fu_262 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd12) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag53_0_fu_250 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag53_0_fu_250 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd13) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag56_0_fu_238 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag56_0_fu_238 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd14) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag59_0_fu_226 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag59_0_fu_226 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd15) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag62_0_fu_214 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag62_0_fu_214 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag_0_fu_210 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag_0_fu_210 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_2694 <= i_fu_1190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mask46_addr_reg_2616 <= mask_offset_cast_fu_1020_p1;
        mask47_addr_reg_2621 <= mask_offset_cast_fu_1020_p1;
        mask48_addr_reg_2626 <= mask_offset_cast_fu_1020_p1;
        mask49_addr_reg_2631 <= mask_offset_cast_fu_1020_p1;
        mask50_addr_reg_2636 <= mask_offset_cast_fu_1020_p1;
        mask51_addr_reg_2641 <= mask_offset_cast_fu_1020_p1;
        mask52_addr_reg_2646 <= mask_offset_cast_fu_1020_p1;
        mask53_addr_reg_2651 <= mask_offset_cast_fu_1020_p1;
        mask54_addr_reg_2656 <= mask_offset_cast_fu_1020_p1;
        mask55_addr_reg_2661 <= mask_offset_cast_fu_1020_p1;
        mask56_addr_reg_2666 <= mask_offset_cast_fu_1020_p1;
        mask57_addr_reg_2671 <= mask_offset_cast_fu_1020_p1;
        mask58_addr_reg_2676 <= mask_offset_cast_fu_1020_p1;
        mask59_addr_reg_2681 <= mask_offset_cast_fu_1020_p1;
        mask60_addr_reg_2686 <= mask_offset_cast_fu_1020_p1;
        mask_addr_reg_2611 <= mask_offset_cast_fu_1020_p1;
        output_0_V_read_cas_reg_2526[25 : 0] <= output_0_V_read_cas_fu_1016_p1[25 : 0];
        output_10_V_read_ca_reg_2476[25 : 0] <= output_10_V_read_ca_fu_976_p1[25 : 0];
        output_11_V_read_ca_reg_2471[25 : 0] <= output_11_V_read_ca_fu_972_p1[25 : 0];
        output_12_V_read_ca_reg_2466[25 : 0] <= output_12_V_read_ca_fu_968_p1[25 : 0];
        output_13_V_read_ca_reg_2461[25 : 0] <= output_13_V_read_ca_fu_964_p1[25 : 0];
        output_14_V_read_ca_reg_2456[25 : 0] <= output_14_V_read_ca_fu_960_p1[25 : 0];
        output_15_V_read_ca_reg_2451[25 : 0] <= output_15_V_read_ca_fu_956_p1[25 : 0];
        output_1_V_read_cas_reg_2521[25 : 0] <= output_1_V_read_cas_fu_1012_p1[25 : 0];
        output_2_V_read_cas_reg_2516[25 : 0] <= output_2_V_read_cas_fu_1008_p1[25 : 0];
        output_3_V_read_cas_reg_2511[25 : 0] <= output_3_V_read_cas_fu_1004_p1[25 : 0];
        output_4_V_read_cas_reg_2506[25 : 0] <= output_4_V_read_cas_fu_1000_p1[25 : 0];
        output_5_V_read_cas_reg_2501[25 : 0] <= output_5_V_read_cas_fu_996_p1[25 : 0];
        output_6_V_read_cas_reg_2496[25 : 0] <= output_6_V_read_cas_fu_992_p1[25 : 0];
        output_7_V_read_cas_reg_2491[25 : 0] <= output_7_V_read_cas_fu_988_p1[25 : 0];
        output_8_V_read_cas_reg_2486[25 : 0] <= output_8_V_read_cas_fu_984_p1[25 : 0];
        output_9_V_read_cas_reg_2481[25 : 0] <= output_9_V_read_cas_fu_980_p1[25 : 0];
        zext_ln1192_39_reg_2536[25 : 0] <= zext_ln1192_39_fu_1044_p1[25 : 0];
        zext_ln1192_40_reg_2541[25 : 0] <= zext_ln1192_40_fu_1048_p1[25 : 0];
        zext_ln1192_41_reg_2546[25 : 0] <= zext_ln1192_41_fu_1052_p1[25 : 0];
        zext_ln1192_42_reg_2551[25 : 0] <= zext_ln1192_42_fu_1056_p1[25 : 0];
        zext_ln1192_43_reg_2556[25 : 0] <= zext_ln1192_43_fu_1060_p1[25 : 0];
        zext_ln1192_44_reg_2561[25 : 0] <= zext_ln1192_44_fu_1064_p1[25 : 0];
        zext_ln1192_45_reg_2566[25 : 0] <= zext_ln1192_45_fu_1068_p1[25 : 0];
        zext_ln1192_46_reg_2571[25 : 0] <= zext_ln1192_46_fu_1072_p1[25 : 0];
        zext_ln1192_47_reg_2576[25 : 0] <= zext_ln1192_47_fu_1076_p1[25 : 0];
        zext_ln1192_48_reg_2581[25 : 0] <= zext_ln1192_48_fu_1080_p1[25 : 0];
        zext_ln1192_49_reg_2586[25 : 0] <= zext_ln1192_49_fu_1084_p1[25 : 0];
        zext_ln1192_50_reg_2591[25 : 0] <= zext_ln1192_50_fu_1088_p1[25 : 0];
        zext_ln1192_51_reg_2596[25 : 0] <= zext_ln1192_51_fu_1092_p1[25 : 0];
        zext_ln1192_52_reg_2601[25 : 0] <= zext_ln1192_52_fu_1096_p1[25 : 0];
        zext_ln1192_53_reg_2606[25 : 0] <= zext_ln1192_53_fu_1100_p1[25 : 0];
        zext_ln1192_reg_2531[25 : 0] <= zext_ln1192_fu_1040_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2874 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        mul_ln1192_76_reg_2884 <= mul_ln1192_76_fu_1573_p2;
        mul_ln1192_77_reg_2889 <= mul_ln1192_77_fu_1581_p2;
        mul_ln1192_78_reg_2894 <= mul_ln1192_78_fu_1589_p2;
        mul_ln1192_79_reg_2899 <= mul_ln1192_79_fu_1597_p2;
        mul_ln1192_80_reg_2904 <= mul_ln1192_80_fu_1605_p2;
        mul_ln1192_81_reg_2909 <= mul_ln1192_81_fu_1613_p2;
        mul_ln1192_82_reg_2914 <= mul_ln1192_82_fu_1621_p2;
        mul_ln1192_83_reg_2919 <= mul_ln1192_83_fu_1629_p2;
        mul_ln1192_84_reg_2924 <= mul_ln1192_84_fu_1637_p2;
        mul_ln1192_85_reg_2929 <= mul_ln1192_85_fu_1645_p2;
        mul_ln1192_86_reg_2934 <= mul_ln1192_86_fu_1653_p2;
        mul_ln1192_87_reg_2939 <= mul_ln1192_87_fu_1661_p2;
        mul_ln1192_88_reg_2944 <= mul_ln1192_88_fu_1669_p2;
        mul_ln1192_89_reg_2949 <= mul_ln1192_89_fu_1677_p2;
        mul_ln1192_90_reg_2954 <= mul_ln1192_90_fu_1685_p2;
        mul_ln1192_reg_2879 <= mul_ln1192_fu_1565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd15) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_119_fu_206 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd14) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_120_fu_218 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_121_fu_222 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd13) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_122_fu_230 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd12) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_123_fu_242 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_124_fu_246 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd11) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_125_fu_254 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd10) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_126_fu_266 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_127_fu_270 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd9) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_128_fu_278 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd8) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_129_fu_290 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_130_fu_294 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd7) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_131_fu_302 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd6) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_132_fu_314 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd4) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_133_fu_318 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_2784 == 4'd5) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_134_fu_326 <= p_Val2_s_fu_2076_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_V_reg_2789 <= b4_V_q0;
        tmp_reg_2874 <= tmp_fu_1525_p18;
        w4_V_0_load_reg_2794 <= w4_V_0_q0;
        w4_V_10_load_reg_2844 <= w4_V_10_q0;
        w4_V_11_load_reg_2849 <= w4_V_11_q0;
        w4_V_12_load_reg_2854 <= w4_V_12_q0;
        w4_V_13_load_reg_2859 <= w4_V_13_q0;
        w4_V_14_load_reg_2864 <= w4_V_14_q0;
        w4_V_15_load_reg_2869 <= w4_V_15_q0;
        w4_V_1_load_reg_2799 <= w4_V_1_q0;
        w4_V_2_load_reg_2804 <= w4_V_2_q0;
        w4_V_3_load_reg_2809 <= w4_V_3_q0;
        w4_V_4_load_reg_2814 <= w4_V_4_q0;
        w4_V_5_load_reg_2819 <= w4_V_5_q0;
        w4_V_6_load_reg_2824 <= w4_V_6_q0;
        w4_V_7_load_reg_2829 <= w4_V_7_q0;
        w4_V_8_load_reg_2834 <= w4_V_8_q0;
        w4_V_9_load_reg_2839 <= w4_V_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2874 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_82_reg_2959 <= {{add_ln1192_87_fu_1750_p2[36:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2874 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_85_reg_2964 <= {{add_ln1192_90_fu_1826_p2[36:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2874 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_88_reg_2969 <= {{add_ln1192_93_fu_1895_p2[36:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2874 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_91_reg_2974 <= {{add_ln1192_96_fu_1970_p2[36:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2874 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_94_reg_2979 <= {{add_ln1192_99_fu_2039_p2[36:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_1184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln26_reg_2784 <= trunc_ln26_fu_1217_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln19_fu_1184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_1184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b4_V_ce0 = 1'b1;
    end else begin
        b4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask46_ce0 = 1'b1;
    end else begin
        mask46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask47_ce0 = 1'b1;
    end else begin
        mask47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask48_ce0 = 1'b1;
    end else begin
        mask48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask49_ce0 = 1'b1;
    end else begin
        mask49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask50_ce0 = 1'b1;
    end else begin
        mask50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask51_ce0 = 1'b1;
    end else begin
        mask51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask52_ce0 = 1'b1;
    end else begin
        mask52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask53_ce0 = 1'b1;
    end else begin
        mask53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask54_ce0 = 1'b1;
    end else begin
        mask54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask55_ce0 = 1'b1;
    end else begin
        mask55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask56_ce0 = 1'b1;
    end else begin
        mask56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask57_ce0 = 1'b1;
    end else begin
        mask57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask58_ce0 = 1'b1;
    end else begin
        mask58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask59_ce0 = 1'b1;
    end else begin
        mask59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask60_ce0 = 1'b1;
    end else begin
        mask60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask_ce0 = 1'b1;
    end else begin
        mask_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_0_ce0 = 1'b1;
    end else begin
        w4_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_10_ce0 = 1'b1;
    end else begin
        w4_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_11_ce0 = 1'b1;
    end else begin
        w4_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_12_ce0 = 1'b1;
    end else begin
        w4_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_13_ce0 = 1'b1;
    end else begin
        w4_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_14_ce0 = 1'b1;
    end else begin
        w4_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_15_ce0 = 1'b1;
    end else begin
        w4_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_1_ce0 = 1'b1;
    end else begin
        w4_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_2_ce0 = 1'b1;
    end else begin
        w4_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_3_ce0 = 1'b1;
    end else begin
        w4_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_4_ce0 = 1'b1;
    end else begin
        w4_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_5_ce0 = 1'b1;
    end else begin
        w4_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_6_ce0 = 1'b1;
    end else begin
        w4_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_7_ce0 = 1'b1;
    end else begin
        w4_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_8_ce0 = 1'b1;
    end else begin
        w4_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w4_V_9_ce0 = 1'b1;
    end else begin
        w4_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_1184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_100_fu_2061_p2 = (shl_ln728_94_fu_2054_p3 + mul_ln1192_90_reg_2954);

assign add_ln1192_86_fu_1724_p2 = (shl_ln728_s_fu_1716_p3 + mul_ln1192_76_reg_2884);

assign add_ln1192_87_fu_1750_p2 = ($signed(shl_ln728_81_fu_1742_p3) + $signed(sext_ln1192_128_fu_1729_p1));

assign add_ln1192_88_fu_1776_p2 = ($signed(shl_ln728_82_fu_1769_p3) + $signed(sext_ln1192_130_fu_1766_p1));

assign add_ln1192_89_fu_1800_p2 = (shl_ln728_83_fu_1792_p3 + mul_ln1192_79_reg_2899);

assign add_ln1192_90_fu_1826_p2 = ($signed(shl_ln728_84_fu_1818_p3) + $signed(sext_ln1192_132_fu_1805_p1));

assign add_ln1192_91_fu_1849_p2 = (shl_ln728_85_fu_1842_p3 + mul_ln1192_81_reg_2909);

assign add_ln1192_92_fu_1872_p2 = (shl_ln728_86_fu_1864_p3 + mul_ln1192_82_reg_2914);

assign add_ln1192_93_fu_1895_p2 = (shl_ln728_87_fu_1887_p3 + mul_ln1192_83_reg_2919);

assign add_ln1192_94_fu_1920_p2 = ($signed(shl_ln728_88_fu_1913_p3) + $signed(sext_ln1192_134_fu_1910_p1));

assign add_ln1192_95_fu_1944_p2 = (shl_ln728_89_fu_1936_p3 + mul_ln1192_85_reg_2929);

assign add_ln1192_96_fu_1970_p2 = ($signed(shl_ln728_90_fu_1962_p3) + $signed(sext_ln1192_136_fu_1949_p1));

assign add_ln1192_97_fu_1993_p2 = (shl_ln728_91_fu_1986_p3 + mul_ln1192_87_reg_2939);

assign add_ln1192_98_fu_2016_p2 = (shl_ln728_92_fu_2008_p3 + mul_ln1192_88_reg_2944);

assign add_ln1192_99_fu_2039_p2 = (shl_ln728_93_fu_2031_p3 + mul_ln1192_89_reg_2949);

assign add_ln1192_fu_1701_p2 = ($signed(sext_ln728_fu_1697_p1) + $signed(mul_ln1192_reg_2879));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = select_ln28_fu_1317_p3;

assign ap_return_1 = select_ln28_110_fu_1324_p3;

assign ap_return_10 = select_ln28_119_fu_1387_p3;

assign ap_return_11 = select_ln28_120_fu_1394_p3;

assign ap_return_12 = select_ln28_121_fu_1401_p3;

assign ap_return_13 = select_ln28_122_fu_1408_p3;

assign ap_return_14 = select_ln28_123_fu_1415_p3;

assign ap_return_15 = select_ln28_124_fu_1422_p3;

assign ap_return_2 = select_ln28_111_fu_1331_p3;

assign ap_return_3 = select_ln28_112_fu_1338_p3;

assign ap_return_4 = select_ln28_113_fu_1345_p3;

assign ap_return_5 = select_ln28_114_fu_1352_p3;

assign ap_return_6 = select_ln28_115_fu_1359_p3;

assign ap_return_7 = select_ln28_116_fu_1366_p3;

assign ap_return_8 = select_ln28_117_fu_1373_p3;

assign ap_return_9 = select_ln28_118_fu_1380_p3;

assign b4_V_address0 = zext_ln21_fu_1196_p1;

assign i_fu_1190_p2 = (i_0_reg_945 + 5'd1);

assign icmp_ln19_fu_1184_p2 = ((i_0_reg_945 == 5'd16) ? 1'b1 : 1'b0);

assign mask46_address0 = mask46_addr_reg_2616;

assign mask47_address0 = mask47_addr_reg_2621;

assign mask48_address0 = mask48_addr_reg_2626;

assign mask49_address0 = mask49_addr_reg_2631;

assign mask50_address0 = mask50_addr_reg_2636;

assign mask51_address0 = mask51_addr_reg_2641;

assign mask52_address0 = mask52_addr_reg_2646;

assign mask53_address0 = mask53_addr_reg_2651;

assign mask54_address0 = mask54_addr_reg_2656;

assign mask55_address0 = mask55_addr_reg_2661;

assign mask56_address0 = mask56_addr_reg_2666;

assign mask57_address0 = mask57_addr_reg_2671;

assign mask58_address0 = mask58_addr_reg_2676;

assign mask59_address0 = mask59_addr_reg_2681;

assign mask60_address0 = mask60_addr_reg_2686;

assign mask_address0 = mask_addr_reg_2611;

assign mask_offset_cast_fu_1020_p1 = mask_offset;

assign mul_ln1192_76_fu_1573_p0 = zext_ln1192_39_reg_2536;

assign mul_ln1192_76_fu_1573_p1 = w4_V_1_load_reg_2799;

assign mul_ln1192_76_fu_1573_p2 = ($signed({{1'b0}, {mul_ln1192_76_fu_1573_p0}}) * $signed(mul_ln1192_76_fu_1573_p1));

assign mul_ln1192_77_fu_1581_p0 = zext_ln1192_40_reg_2541;

assign mul_ln1192_77_fu_1581_p1 = w4_V_2_load_reg_2804;

assign mul_ln1192_77_fu_1581_p2 = ($signed({{1'b0}, {mul_ln1192_77_fu_1581_p0}}) * $signed(mul_ln1192_77_fu_1581_p1));

assign mul_ln1192_78_fu_1589_p0 = zext_ln1192_41_reg_2546;

assign mul_ln1192_78_fu_1589_p1 = w4_V_3_load_reg_2809;

assign mul_ln1192_78_fu_1589_p2 = ($signed({{1'b0}, {mul_ln1192_78_fu_1589_p0}}) * $signed(mul_ln1192_78_fu_1589_p1));

assign mul_ln1192_79_fu_1597_p0 = zext_ln1192_42_reg_2551;

assign mul_ln1192_79_fu_1597_p1 = w4_V_4_load_reg_2814;

assign mul_ln1192_79_fu_1597_p2 = ($signed({{1'b0}, {mul_ln1192_79_fu_1597_p0}}) * $signed(mul_ln1192_79_fu_1597_p1));

assign mul_ln1192_80_fu_1605_p0 = zext_ln1192_43_reg_2556;

assign mul_ln1192_80_fu_1605_p1 = w4_V_5_load_reg_2819;

assign mul_ln1192_80_fu_1605_p2 = ($signed({{1'b0}, {mul_ln1192_80_fu_1605_p0}}) * $signed(mul_ln1192_80_fu_1605_p1));

assign mul_ln1192_81_fu_1613_p0 = zext_ln1192_44_reg_2561;

assign mul_ln1192_81_fu_1613_p1 = w4_V_6_load_reg_2824;

assign mul_ln1192_81_fu_1613_p2 = ($signed({{1'b0}, {mul_ln1192_81_fu_1613_p0}}) * $signed(mul_ln1192_81_fu_1613_p1));

assign mul_ln1192_82_fu_1621_p0 = zext_ln1192_45_reg_2566;

assign mul_ln1192_82_fu_1621_p1 = w4_V_7_load_reg_2829;

assign mul_ln1192_82_fu_1621_p2 = ($signed({{1'b0}, {mul_ln1192_82_fu_1621_p0}}) * $signed(mul_ln1192_82_fu_1621_p1));

assign mul_ln1192_83_fu_1629_p0 = zext_ln1192_46_reg_2571;

assign mul_ln1192_83_fu_1629_p1 = w4_V_8_load_reg_2834;

assign mul_ln1192_83_fu_1629_p2 = ($signed({{1'b0}, {mul_ln1192_83_fu_1629_p0}}) * $signed(mul_ln1192_83_fu_1629_p1));

assign mul_ln1192_84_fu_1637_p0 = zext_ln1192_47_reg_2576;

assign mul_ln1192_84_fu_1637_p1 = w4_V_9_load_reg_2839;

assign mul_ln1192_84_fu_1637_p2 = ($signed({{1'b0}, {mul_ln1192_84_fu_1637_p0}}) * $signed(mul_ln1192_84_fu_1637_p1));

assign mul_ln1192_85_fu_1645_p0 = zext_ln1192_48_reg_2581;

assign mul_ln1192_85_fu_1645_p1 = w4_V_10_load_reg_2844;

assign mul_ln1192_85_fu_1645_p2 = ($signed({{1'b0}, {mul_ln1192_85_fu_1645_p0}}) * $signed(mul_ln1192_85_fu_1645_p1));

assign mul_ln1192_86_fu_1653_p0 = zext_ln1192_49_reg_2586;

assign mul_ln1192_86_fu_1653_p1 = w4_V_11_load_reg_2849;

assign mul_ln1192_86_fu_1653_p2 = ($signed({{1'b0}, {mul_ln1192_86_fu_1653_p0}}) * $signed(mul_ln1192_86_fu_1653_p1));

assign mul_ln1192_87_fu_1661_p0 = zext_ln1192_50_reg_2591;

assign mul_ln1192_87_fu_1661_p1 = w4_V_12_load_reg_2854;

assign mul_ln1192_87_fu_1661_p2 = ($signed({{1'b0}, {mul_ln1192_87_fu_1661_p0}}) * $signed(mul_ln1192_87_fu_1661_p1));

assign mul_ln1192_88_fu_1669_p0 = zext_ln1192_51_reg_2596;

assign mul_ln1192_88_fu_1669_p1 = w4_V_13_load_reg_2859;

assign mul_ln1192_88_fu_1669_p2 = ($signed({{1'b0}, {mul_ln1192_88_fu_1669_p0}}) * $signed(mul_ln1192_88_fu_1669_p1));

assign mul_ln1192_89_fu_1677_p0 = zext_ln1192_52_reg_2601;

assign mul_ln1192_89_fu_1677_p1 = w4_V_14_load_reg_2864;

assign mul_ln1192_89_fu_1677_p2 = ($signed({{1'b0}, {mul_ln1192_89_fu_1677_p0}}) * $signed(mul_ln1192_89_fu_1677_p1));

assign mul_ln1192_90_fu_1685_p0 = zext_ln1192_53_reg_2606;

assign mul_ln1192_90_fu_1685_p1 = w4_V_15_load_reg_2869;

assign mul_ln1192_90_fu_1685_p2 = ($signed({{1'b0}, {mul_ln1192_90_fu_1685_p0}}) * $signed(mul_ln1192_90_fu_1685_p1));

assign mul_ln1192_fu_1565_p0 = zext_ln1192_reg_2531;

assign mul_ln1192_fu_1565_p1 = w4_V_0_load_reg_2794;

assign mul_ln1192_fu_1565_p2 = ($signed({{1'b0}, {mul_ln1192_fu_1565_p0}}) * $signed(mul_ln1192_fu_1565_p1));

assign output_0_V_read_cas_fu_1016_p1 = output_0_V_read;

assign output_10_V_read_ca_fu_976_p1 = output_10_V_read;

assign output_11_V_read_ca_fu_972_p1 = output_11_V_read;

assign output_12_V_read_ca_fu_968_p1 = output_12_V_read;

assign output_13_V_read_ca_fu_964_p1 = output_13_V_read;

assign output_14_V_read_ca_fu_960_p1 = output_14_V_read;

assign output_15_V_read_ca_fu_956_p1 = output_15_V_read;

assign output_1_V_read_cas_fu_1012_p1 = output_1_V_read;

assign output_2_V_read_cas_fu_1008_p1 = output_2_V_read;

assign output_3_V_read_cas_fu_1004_p1 = output_3_V_read;

assign output_4_V_read_cas_fu_1000_p1 = output_4_V_read;

assign output_5_V_read_cas_fu_996_p1 = output_5_V_read;

assign output_6_V_read_cas_fu_992_p1 = output_6_V_read;

assign output_7_V_read_cas_fu_988_p1 = output_7_V_read;

assign output_8_V_read_cas_fu_984_p1 = output_8_V_read;

assign output_9_V_read_cas_fu_980_p1 = output_9_V_read;

assign p_Val2_s_fu_2076_p3 = ((tmp_reg_2874[0:0] === 1'b1) ? trunc_ln708_s_fu_2066_p4 : 27'd0);

assign select_ln28_110_fu_1324_p3 = ((write_flag19_0_fu_234[0:0] === 1'b1) ? p_Val2_124_fu_246 : output_1_V_read_cas_reg_2521);

assign select_ln28_111_fu_1331_p3 = ((write_flag23_0_fu_258[0:0] === 1'b1) ? p_Val2_127_fu_270 : output_2_V_read_cas_reg_2516);

assign select_ln28_112_fu_1338_p3 = ((write_flag26_0_fu_282[0:0] === 1'b1) ? p_Val2_130_fu_294 : output_3_V_read_cas_reg_2511);

assign select_ln28_113_fu_1345_p3 = ((write_flag29_0_fu_306[0:0] === 1'b1) ? p_Val2_133_fu_318 : output_4_V_read_cas_reg_2506);

assign select_ln28_114_fu_1352_p3 = ((write_flag32_0_fu_330[0:0] === 1'b1) ? p_Val2_134_fu_326 : output_5_V_read_cas_reg_2501);

assign select_ln28_115_fu_1359_p3 = ((write_flag35_0_fu_322[0:0] === 1'b1) ? p_Val2_132_fu_314 : output_6_V_read_cas_reg_2496);

assign select_ln28_116_fu_1366_p3 = ((write_flag38_0_fu_310[0:0] === 1'b1) ? p_Val2_131_fu_302 : output_7_V_read_cas_reg_2491);

assign select_ln28_117_fu_1373_p3 = ((write_flag41_0_fu_298[0:0] === 1'b1) ? p_Val2_129_fu_290 : output_8_V_read_cas_reg_2486);

assign select_ln28_118_fu_1380_p3 = ((write_flag44_0_fu_286[0:0] === 1'b1) ? p_Val2_128_fu_278 : output_9_V_read_cas_reg_2481);

assign select_ln28_119_fu_1387_p3 = ((write_flag47_0_fu_274[0:0] === 1'b1) ? p_Val2_126_fu_266 : output_10_V_read_ca_reg_2476);

assign select_ln28_120_fu_1394_p3 = ((write_flag50_0_fu_262[0:0] === 1'b1) ? p_Val2_125_fu_254 : output_11_V_read_ca_reg_2471);

assign select_ln28_121_fu_1401_p3 = ((write_flag53_0_fu_250[0:0] === 1'b1) ? p_Val2_123_fu_242 : output_12_V_read_ca_reg_2466);

assign select_ln28_122_fu_1408_p3 = ((write_flag56_0_fu_238[0:0] === 1'b1) ? p_Val2_122_fu_230 : output_13_V_read_ca_reg_2461);

assign select_ln28_123_fu_1415_p3 = ((write_flag59_0_fu_226[0:0] === 1'b1) ? p_Val2_120_fu_218 : output_14_V_read_ca_reg_2456);

assign select_ln28_124_fu_1422_p3 = ((write_flag62_0_fu_214[0:0] === 1'b1) ? p_Val2_119_fu_206 : output_15_V_read_ca_reg_2451);

assign select_ln28_fu_1317_p3 = ((write_flag_0_fu_210[0:0] === 1'b1) ? p_Val2_121_fu_222 : output_0_V_read_cas_reg_2526);

assign sext_ln1192_128_fu_1729_p1 = $signed(mul_ln1192_77_reg_2889);

assign sext_ln1192_130_fu_1766_p1 = $signed(mul_ln1192_78_reg_2894);

assign sext_ln1192_132_fu_1805_p1 = $signed(mul_ln1192_80_reg_2904);

assign sext_ln1192_134_fu_1910_p1 = $signed(mul_ln1192_84_reg_2924);

assign sext_ln1192_136_fu_1949_p1 = $signed(mul_ln1192_86_reg_2934);

assign sext_ln728_fu_1697_p1 = $signed(shl_ln_fu_1690_p3);

assign shl_ln728_81_fu_1742_p3 = {{tmp_81_fu_1732_p4}, {10'd0}};

assign shl_ln728_82_fu_1769_p3 = {{tmp_82_reg_2959}, {10'd0}};

assign shl_ln728_83_fu_1792_p3 = {{tmp_83_fu_1782_p4}, {10'd0}};

assign shl_ln728_84_fu_1818_p3 = {{tmp_84_fu_1808_p4}, {10'd0}};

assign shl_ln728_85_fu_1842_p3 = {{tmp_85_reg_2964}, {10'd0}};

assign shl_ln728_86_fu_1864_p3 = {{tmp_86_fu_1854_p4}, {10'd0}};

assign shl_ln728_87_fu_1887_p3 = {{tmp_87_fu_1877_p4}, {10'd0}};

assign shl_ln728_88_fu_1913_p3 = {{tmp_88_reg_2969}, {10'd0}};

assign shl_ln728_89_fu_1936_p3 = {{tmp_89_fu_1926_p4}, {10'd0}};

assign shl_ln728_90_fu_1962_p3 = {{tmp_90_fu_1952_p4}, {10'd0}};

assign shl_ln728_91_fu_1986_p3 = {{tmp_91_reg_2974}, {10'd0}};

assign shl_ln728_92_fu_2008_p3 = {{tmp_92_fu_1998_p4}, {10'd0}};

assign shl_ln728_93_fu_2031_p3 = {{tmp_93_fu_2021_p4}, {10'd0}};

assign shl_ln728_94_fu_2054_p3 = {{tmp_94_reg_2979}, {10'd0}};

assign shl_ln728_s_fu_1716_p3 = {{tmp_s_fu_1706_p4}, {10'd0}};

assign shl_ln_fu_1690_p3 = {{sum_V_reg_2789}, {10'd0}};

assign tmp_81_fu_1732_p4 = {{add_ln1192_86_fu_1724_p2[36:10]}};

assign tmp_83_fu_1782_p4 = {{add_ln1192_88_fu_1776_p2[36:10]}};

assign tmp_84_fu_1808_p4 = {{add_ln1192_89_fu_1800_p2[36:10]}};

assign tmp_86_fu_1854_p4 = {{add_ln1192_91_fu_1849_p2[36:10]}};

assign tmp_87_fu_1877_p4 = {{add_ln1192_92_fu_1872_p2[36:10]}};

assign tmp_89_fu_1926_p4 = {{add_ln1192_94_fu_1920_p2[36:10]}};

assign tmp_90_fu_1952_p4 = {{add_ln1192_95_fu_1944_p2[36:10]}};

assign tmp_92_fu_1998_p4 = {{add_ln1192_97_fu_1993_p2[36:10]}};

assign tmp_93_fu_2021_p4 = {{add_ln1192_98_fu_2016_p2[36:10]}};

assign tmp_s_fu_1706_p4 = {{add_ln1192_fu_1701_p2[36:10]}};

assign trunc_ln26_fu_1217_p1 = i_0_reg_945[3:0];

assign trunc_ln708_s_fu_2066_p4 = {{add_ln1192_100_fu_2061_p2[36:10]}};

assign w4_V_0_address0 = zext_ln21_fu_1196_p1;

assign w4_V_10_address0 = zext_ln21_fu_1196_p1;

assign w4_V_11_address0 = zext_ln21_fu_1196_p1;

assign w4_V_12_address0 = zext_ln21_fu_1196_p1;

assign w4_V_13_address0 = zext_ln21_fu_1196_p1;

assign w4_V_14_address0 = zext_ln21_fu_1196_p1;

assign w4_V_15_address0 = zext_ln21_fu_1196_p1;

assign w4_V_1_address0 = zext_ln21_fu_1196_p1;

assign w4_V_2_address0 = zext_ln21_fu_1196_p1;

assign w4_V_3_address0 = zext_ln21_fu_1196_p1;

assign w4_V_4_address0 = zext_ln21_fu_1196_p1;

assign w4_V_5_address0 = zext_ln21_fu_1196_p1;

assign w4_V_6_address0 = zext_ln21_fu_1196_p1;

assign w4_V_7_address0 = zext_ln21_fu_1196_p1;

assign w4_V_8_address0 = zext_ln21_fu_1196_p1;

assign w4_V_9_address0 = zext_ln21_fu_1196_p1;

assign zext_ln1192_39_fu_1044_p1 = input_1_V_read;

assign zext_ln1192_40_fu_1048_p1 = input_2_V_read;

assign zext_ln1192_41_fu_1052_p1 = input_3_V_read;

assign zext_ln1192_42_fu_1056_p1 = input_4_V_read;

assign zext_ln1192_43_fu_1060_p1 = input_5_V_read;

assign zext_ln1192_44_fu_1064_p1 = input_6_V_read;

assign zext_ln1192_45_fu_1068_p1 = input_7_V_read;

assign zext_ln1192_46_fu_1072_p1 = input_8_V_read;

assign zext_ln1192_47_fu_1076_p1 = input_9_V_read;

assign zext_ln1192_48_fu_1080_p1 = input_10_V_read;

assign zext_ln1192_49_fu_1084_p1 = input_11_V_read;

assign zext_ln1192_50_fu_1088_p1 = input_12_V_read;

assign zext_ln1192_51_fu_1092_p1 = input_13_V_read;

assign zext_ln1192_52_fu_1096_p1 = input_14_V_read;

assign zext_ln1192_53_fu_1100_p1 = input_15_V_read;

assign zext_ln1192_fu_1040_p1 = input_0_V_read;

assign zext_ln21_fu_1196_p1 = i_0_reg_945;

always @ (posedge ap_clk) begin
    output_15_V_read_ca_reg_2451[26] <= 1'b0;
    output_14_V_read_ca_reg_2456[26] <= 1'b0;
    output_13_V_read_ca_reg_2461[26] <= 1'b0;
    output_12_V_read_ca_reg_2466[26] <= 1'b0;
    output_11_V_read_ca_reg_2471[26] <= 1'b0;
    output_10_V_read_ca_reg_2476[26] <= 1'b0;
    output_9_V_read_cas_reg_2481[26] <= 1'b0;
    output_8_V_read_cas_reg_2486[26] <= 1'b0;
    output_7_V_read_cas_reg_2491[26] <= 1'b0;
    output_6_V_read_cas_reg_2496[26] <= 1'b0;
    output_5_V_read_cas_reg_2501[26] <= 1'b0;
    output_4_V_read_cas_reg_2506[26] <= 1'b0;
    output_3_V_read_cas_reg_2511[26] <= 1'b0;
    output_2_V_read_cas_reg_2516[26] <= 1'b0;
    output_1_V_read_cas_reg_2521[26] <= 1'b0;
    output_0_V_read_cas_reg_2526[26] <= 1'b0;
    zext_ln1192_reg_2531[36:26] <= 11'b00000000000;
    zext_ln1192_39_reg_2536[36:26] <= 11'b00000000000;
    zext_ln1192_40_reg_2541[35:26] <= 10'b0000000000;
    zext_ln1192_41_reg_2546[35:26] <= 10'b0000000000;
    zext_ln1192_42_reg_2551[36:26] <= 11'b00000000000;
    zext_ln1192_43_reg_2556[35:26] <= 10'b0000000000;
    zext_ln1192_44_reg_2561[36:26] <= 11'b00000000000;
    zext_ln1192_45_reg_2566[36:26] <= 11'b00000000000;
    zext_ln1192_46_reg_2571[36:26] <= 11'b00000000000;
    zext_ln1192_47_reg_2576[35:26] <= 10'b0000000000;
    zext_ln1192_48_reg_2581[36:26] <= 11'b00000000000;
    zext_ln1192_49_reg_2586[35:26] <= 10'b0000000000;
    zext_ln1192_50_reg_2591[36:26] <= 11'b00000000000;
    zext_ln1192_51_reg_2596[36:26] <= 11'b00000000000;
    zext_ln1192_52_reg_2601[36:26] <= 11'b00000000000;
    zext_ln1192_53_reg_2606[36:26] <= 11'b00000000000;
end

endmodule //dense_lay_16_16_s
